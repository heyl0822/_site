<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yanling&#39;s Blog</title>
    <description>Yanling&#39;s fun time with computer graphics and programming related.
</description>
    <link>http://heyl0822.github.io//_site/</link>
    <atom:link href="http://heyl0822.github.io//_site/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 25 May 2016 16:14:05 -0700</pubDate>
    <lastBuildDate>Wed, 25 May 2016 16:14:05 -0700</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Learn C++ Ch4 Variable Scope and More Types</title>
        <description>&lt;h2 id=&quot;blocks-compound-statements&quot;&gt;Blocks (compound statements)&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;block&lt;/strong&gt; of statements, also called a &lt;strong&gt;compound statement&lt;/strong&gt;, is a group of statements that is treated by the compiler as if it were a single statement.&lt;/p&gt;

&lt;p&gt;A variable’s &lt;strong&gt;scope&lt;/strong&gt; determines where a variable is accessible.&lt;/p&gt;

&lt;p&gt;A variable’s &lt;strong&gt;duration&lt;/strong&gt; determines where it is created and destroyed.&lt;/p&gt;

&lt;p&gt;Variables defined inside a block are called &lt;strong&gt;local variables&lt;/strong&gt;. Local variables have &lt;strong&gt;automatic duration&lt;/strong&gt;, which means they are created when the block they are part of is entered, and destroyed when the block they are part of is exited. Local variables have &lt;strong&gt;block scope&lt;/strong&gt; (also called &lt;strong&gt;local scope&lt;/strong&gt;), which means they enter scope at the point of declaration and go out of scope at the end of the block that they are defined in.&lt;/p&gt;

&lt;p&gt;Note that variables inside nested blocks can have the same name as variable inside outer blocks. When this happens, the nested variable “hides” the outer variable. This is called &lt;strong&gt;name hiding&lt;/strong&gt; or &lt;strong&gt;shadowing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Rule: Define variables in the smallest scope possible.
Rule: Avoid using nested variables with the same names as variables in an outer block.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Variables defined inside blocks are called local variables. These variables can only be accessed inside the block in which they are defined (including nested blocks), and they are destroyed as soon as the block ends.&lt;/p&gt;

&lt;p&gt;Define variables in the smallest scope that they are used. If a variable is only used within a nested block, define it within the nested block.&lt;/p&gt;

&lt;h2 id=&quot;global-variables-and-linkage&quot;&gt;Global variables and linkage&lt;/h2&gt;

&lt;p&gt;Variables declared outside of a block are called &lt;strong&gt;global variables&lt;/strong&gt;. Global variables have &lt;strong&gt;static duration&lt;/strong&gt;, which means they are created when the program starts and are destroyed when it ends. Global variables have &lt;strong&gt;global scope&lt;/strong&gt; (also called “global namespace scope” or “file scope”), which means they are visible until the end of the file in which they are declared.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Defining global variables&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;global variables are declared at the top of a file, below the includes, but above any code.&lt;/p&gt;

&lt;p&gt;the global scope operator (::) can be used to tell the compiler you mean the global version instead of the local version.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int g_x; // global variable g_x
const int g_y(2); // global variable g_y

int value = 7; // hides the global variable value
value++; // increments local value, not global value
::value--;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;many developers prefix global variable names with “g_” to indicate that they are global. This both helps identify global variables as well as avoids naming conflicts with local variables.&lt;/p&gt;

&lt;p&gt;A variable’s &lt;strong&gt;linkage&lt;/strong&gt; determines whether multiple instances of an identifier refer to the same variable or not.&lt;/p&gt;

&lt;p&gt;A variable with &lt;strong&gt;internal linkage&lt;/strong&gt; is called an internal variable (or static variable). Variables with internal linkage can be used anywhere within the file they are defined in, but can not be referenced outside the file they exist in.&lt;/p&gt;

&lt;p&gt;A variable with &lt;strong&gt;external linkage&lt;/strong&gt; is called an external variable. Variables with external linkage can be used both in the file they are defined in, as well as in other files.&lt;/p&gt;

&lt;p&gt;If we want to make a global variable internal (able to be used only within a single file), we can use the &lt;strong&gt;static&lt;/strong&gt; keyword to do so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static int g_x; // g_x is static, and can only be used within this file

int main()
{
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;if we want to make a global variable external (able to be used anywhere in our program), we can use the &lt;strong&gt;extern&lt;/strong&gt; keyword to do so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extern double g_y(9.8); // g_y is external, and can be used by other files

int main()
{
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By default, non-const variables declared outside of a block are assumed to be external. However, const variables declared outside of a block are assumed to be internal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Variable forward declarations via the extern keyword&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;in order to use an external global variable that has been declared in another file, you have to use a variable forward declaration. For variables, creating a forward declaration is also done via the &lt;strong&gt;extern&lt;/strong&gt; keyword.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Global variables have global scope, and can be used anywhere in the program. Like functions, you must use a forward declaration (via keyword extern) to use a global variable defined in another file.&lt;/p&gt;

&lt;p&gt;By default, non-const global variables have external linkage. You can use the static keyword to explicitly make them internal if desired.
By default, const global variables have internal linkage. You can use the extern keyword to explicitly make them external if desired.&lt;/p&gt;

&lt;p&gt;Use a g_ prefix to help identify your non-const global variables.&lt;/p&gt;

&lt;p&gt;Here’s a summary chart of the use of the extern keyword for non-const and const variable use cases:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Uninitialized&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;definition:
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uninitialized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;allowed: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialized&lt;/span&gt;

    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Forward&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declaration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;via&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;keyword:
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forward&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declaration&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elsewhere&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forward&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declaration&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elsewhere&lt;/span&gt;

    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Initialized&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;definition:
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Initialized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;keyword:
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redundant&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Avoid use of non-const global variables if at all possible! If you do have to use them, use them sensibly and cautiously.&lt;/p&gt;

&lt;p&gt;Const global variables (symbolic constants) are fine to use, so long as you use proper naming conventions.&lt;/p&gt;

&lt;h2 id=&quot;static-duration-variables&quot;&gt;Static duration variables&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;static duration&lt;/strong&gt; variable (also called a “static variable”) is one that retains its value even after the scope in which it has been created has been exited! Static duration variables are only created (and initialized) once, and then they are persisted throughout the life of the program.&lt;/p&gt;

&lt;h2 id=&quot;scope-duration-and-likage-summary&quot;&gt;Scope, duration and likage summary&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scope summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A identifier’s &lt;strong&gt;scope&lt;/strong&gt; determines where it is accessible. An identifier that is out of scope can not be accessed.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Variables with &lt;strong&gt;block scope / local scope&lt;/strong&gt; can only be accessed within the block in which they are declared. This includes:
    &lt;ul&gt;
      &lt;li&gt;Local variables&lt;/li&gt;
      &lt;li&gt;Function parameters&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Variables with &lt;strong&gt;global scope / file scope&lt;/strong&gt; can be accessed anywhere in the file. This includes:
    &lt;ul&gt;
      &lt;li&gt;Global variables&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Duration summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A variable’s &lt;strong&gt;duration&lt;/strong&gt; determines when it is created and destroyed.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Variables with &lt;strong&gt;automatic duration&lt;/strong&gt; are created when the block they are part of is entered, and destroyed when the block they are part of is exited. This includes:
    &lt;ul&gt;
      &lt;li&gt;Normal local variables&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Variables with &lt;strong&gt;static duration&lt;/strong&gt; are created when the program begins and destroyed when the program ends. This includes:
    &lt;ul&gt;
      &lt;li&gt;Global variables&lt;/li&gt;
      &lt;li&gt;Static local variables&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Variables with &lt;strong&gt;dynamic duration&lt;/strong&gt; are created and destroyed by programmer request. This includes:
    &lt;ul&gt;
      &lt;li&gt;Dynamically allocated variables (we’ll talk about these when we cover dynamic allocation in chapter 6)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Linkage summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An identifier’s linkage determines whether multiple instances of an identifier refer to the same identifier or not.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Identifiers with &lt;strong&gt;no linkage&lt;/strong&gt; mean the identifier only refers to itself. This includes:
    &lt;ul&gt;
      &lt;li&gt;Normal local variables&lt;/li&gt;
      &lt;li&gt;User-defined types, such as enums, typedefs, and classes declared inside a block (we’ll cover these in later lessons).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Identifiers with &lt;strong&gt;internal linkage&lt;/strong&gt; can be accessed anywhere within the file it is declared. This includes:
    &lt;ul&gt;
      &lt;li&gt;Static global variables (initialized or uninitialized)&lt;/li&gt;
      &lt;li&gt;Const global variables&lt;/li&gt;
      &lt;li&gt;Static functions (we’ll cover these in chapter 7)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Identifiers with &lt;strong&gt;external linkage&lt;/strong&gt; can be accessed anywhere within the file it is declared, or other files. This includes:
    &lt;ul&gt;
      &lt;li&gt;Normal functions&lt;/li&gt;
      &lt;li&gt;Non-const global variables (initialized or uninitialized)&lt;/li&gt;
      &lt;li&gt;Extern const global variables&lt;/li&gt;
      &lt;li&gt;User-defined types, such as enums, typedefs, and classes declared in the global scope (we’ll cover these in later lessons).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use a forward declaration to access a function in another file.&lt;/p&gt;

&lt;p&gt;You can use the extern keyword to access a variable with external linkage in another file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Variable scope, duration, and linkage summary&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Example&lt;/th&gt;
      &lt;th&gt;Scope&lt;/th&gt;
      &lt;th&gt;Duration&lt;/th&gt;
      &lt;th&gt;Linkage&lt;/th&gt;
      &lt;th&gt;Notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Local variable&lt;/td&gt;
      &lt;td&gt;int x;&lt;/td&gt;
      &lt;td&gt;Block scope&lt;/td&gt;
      &lt;td&gt;Automatic duratio&lt;/td&gt;
      &lt;td&gt;No linkage&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Static local variable&lt;/td&gt;
      &lt;td&gt;static int x;&lt;/td&gt;
      &lt;td&gt;Block scope&lt;/td&gt;
      &lt;td&gt;Static duration&lt;/td&gt;
      &lt;td&gt;No linkage&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dynamic variable&lt;/td&gt;
      &lt;td&gt;int *x = new int;&lt;/td&gt;
      &lt;td&gt;Block scope&lt;/td&gt;
      &lt;td&gt;Dynamic duration&lt;/td&gt;
      &lt;td&gt;No linkage&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Function parameter&lt;/td&gt;
      &lt;td&gt;void foo(int x)&lt;/td&gt;
      &lt;td&gt;Block scope&lt;/td&gt;
      &lt;td&gt;Automatic duration&lt;/td&gt;
      &lt;td&gt;No linkage&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Non-const global variable&lt;/td&gt;
      &lt;td&gt;int g_x;&lt;/td&gt;
      &lt;td&gt;File scope&lt;/td&gt;
      &lt;td&gt;Static duration&lt;/td&gt;
      &lt;td&gt;External linkage&lt;/td&gt;
      &lt;td&gt;Initialized or uninitialized&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Static global variable&lt;/td&gt;
      &lt;td&gt;static int g_x;&lt;/td&gt;
      &lt;td&gt;File scope&lt;/td&gt;
      &lt;td&gt;Static duration&lt;/td&gt;
      &lt;td&gt;Internal linkage&lt;/td&gt;
      &lt;td&gt;Initialized or uninitialized&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Const global variable&lt;/td&gt;
      &lt;td&gt;const int g_x(1);&lt;/td&gt;
      &lt;td&gt;File scope&lt;/td&gt;
      &lt;td&gt;Static duration&lt;/td&gt;
      &lt;td&gt;Internal linkage&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Extern const global variable&lt;/td&gt;
      &lt;td&gt;extern const int g_x(1);&lt;/td&gt;
      &lt;td&gt;File scope&lt;/td&gt;
      &lt;td&gt;Static duration&lt;/td&gt;
      &lt;td&gt;External linkage&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Namespaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to help avoid issues where two independent pieces of code have naming collisions with each other when used together, C++ allows us to declare our own namespaces via the &lt;strong&gt;namespace&lt;/strong&gt; keyword. Anything declared inside a user-defined namespace belongs to that namespace, not the global namespace.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;namespace Foo
{
    // This doSomething() belongs to namespace Foo
    int doSomething(int x, int y)
    {
        return x + y;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Accessing a namespace with the scope resolution operator (::)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(void)
{
    std::cout &amp;lt;&amp;lt; Foo::doSomething(4, 3);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;The using keyword&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(void)
{
    using namespace Foo; // look in namespace Foo
    std::cout &amp;lt;&amp;lt; doSomething(4, 3) &amp;lt;&amp;lt; std::endl; // calls Foo::doSomething()
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Multiple namespace blocks with the same name allowed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s legal to declare namespace blocks in multiple locations (even multiple times in the same file, if you can find a good reason for doing so). All declarations within the namespace block are considered part of the namespace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nested namespaces and namespace aliases&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;implicit-type-conversion-coercion&quot;&gt;Implicit type conversion (coercion)&lt;/h2&gt;

&lt;p&gt;The process of converting a value from one data type to another is called a &lt;strong&gt;type conversion&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implicit type conversion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Implicit type conversion (also called automatic type conversion or coercion) is performed whenever one fundamental data type is expected, but a different fundamental data type is supplied, and the user does not explicitly tell the compiler how to perform this conversion (via a cast).&lt;/p&gt;

&lt;p&gt;There are two basic types of implicit type conversion: promotions and conversions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Numeric promotion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whenever a value from one type is converted into a value of a larger similar data type, this is called a &lt;strong&gt;numeric promotion&lt;/strong&gt; (or &lt;strong&gt;widening&lt;/strong&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;long l(64); // widen the integer 64 into a long
double d(0.12f); // promote the float 0.12 into a double
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Integral promotion&lt;/strong&gt; involves the conversion of integer types narrower than int (which includes bool, char, unsigned char, signed char, unsigned short, signed short) to an integer (if possible) or an unsigned int.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Floating point promotion&lt;/strong&gt; involves the conversion of a float to a double.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Numeric conversions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we convert a value from a larger type to a similar smaller type, or between different types, this is called a &lt;strong&gt;numeric conversion&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If operands of mixed types are used, the compiler will implicitly convert one operand to agree with the other using a process called &lt;strong&gt;usual arithmetic conversion&lt;/strong&gt;. To do this, it uses the following rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If the operand is an integer, it undergoes integral promotion (as described above).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the operands still do not match, then the compiler finds the highest priority operand and converts the other operand to match.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The priority of operands is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;long double (highest)&lt;/li&gt;
  &lt;li&gt;double&lt;/li&gt;
  &lt;li&gt;float&lt;/li&gt;
  &lt;li&gt;unsigned long long&lt;/li&gt;
  &lt;li&gt;long long&lt;/li&gt;
  &lt;li&gt;unsigned long&lt;/li&gt;
  &lt;li&gt;long&lt;/li&gt;
  &lt;li&gt;unsigned int&lt;/li&gt;
  &lt;li&gt;int (lowest)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;typeid.name()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explicit type conversion (casting)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;cast&lt;/strong&gt; represents an explicit request by the programmer to do a type conversion.&lt;/p&gt;

&lt;p&gt;5 different types of casts: C-style casts, static casts, const casts, dynamic casts, and reinterpret casts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-style casts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;casts are done via the () operator, with the name of the type to cast to inside.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int i1 = 10;
int i2 = 4;
float f = (float)i1 / i2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because C-style casts are not checked by the compiler at compile time, C-style casts can be inherently misused, because they will let you do things that may not make sense, such as getting rid of a const or changing a data type without changing the underlying representation (leading to garbage results).&lt;/p&gt;

&lt;p&gt;Rule: Avoid C-style casts&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;static_cast&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int i1 = 10;
int i2 = 4;
float f = static_cast&amp;lt;float&amp;gt;(i1) / i2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The main advantage of static_cast is that it provides compile-time type checking, making it harder to make an inadvertent error. Static_cast is also (intentionally) less powerful than C-style casts, so you can’t inadvertently remove const or do other things you may not have intended to do.&lt;/p&gt;

&lt;p&gt;Casting should be avoided if at all possible, because any time a cast is used, there is potential for trouble. But there are many times when it can not be avoided. In most of these cases, the C++ static_cast should be used instead of the C-style cast.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std::string&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a collection of sequential characters called a &lt;strong&gt;string&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std::getline()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To read a full line of input into a string, you’re better off using the std::getline() function instead. std::getline() takes two parameters: the first is std::cin, and the second is your string variable.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;std::getline(std::cin, age);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Rule: If reading numeric values with std::cin, it’s a good idea to remove the extraneous newline using std::cin.ignore().&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;std::cin.ignore(32767, &#39;\n&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;enumerated-types&quot;&gt;Enumerated types&lt;/h2&gt;

&lt;p&gt;An &lt;strong&gt;enumerated type&lt;/strong&gt; (also called an &lt;strong&gt;enumeration&lt;/strong&gt;) is a data type where every possible value is defined as a symbolic constant (called an &lt;strong&gt;enumerator&lt;/strong&gt;). Enumerations are declared via the &lt;strong&gt;enum&lt;/strong&gt; keyword.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Declare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumeration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;named&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Here&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumerators&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;These&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;possible&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hold&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumerator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semicolon&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;COLOR_BLACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;COLOR_RED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;COLOR_BLUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;COLOR_GREEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;COLOR_WHITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;COLOR_CYAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;COLOR_YELLOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;COLOR_MAGENTA&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compatibility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumerator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comma&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;however&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itself&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semicolon&lt;/span&gt;

    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;few&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumerated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;COLOR_WHITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;house&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;COLOR_BLUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;it’s common to prefix enumerators with a standard prefix like ANIMAL_ or COLOR_, both to prevent naming conflicts and for code documentation purposes.&lt;/p&gt;

&lt;p&gt;Best practice: Don’t assign specific values to your enumerators.&lt;/p&gt;

&lt;p&gt;Rule: Don’t assign the same value to two enumerators in the same enumeration unless there’s a very good reason.&lt;/p&gt;

&lt;p&gt;C++11 defines a new concept, the &lt;strong&gt;enum class&lt;/strong&gt; (also called a &lt;strong&gt;scoped enumeration&lt;/strong&gt;), which makes enumerations both strongly typed and strongly scoped. To make an enum class, we use the keyword class after the enum keyword.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;BLUE&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;won&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;t work, because there&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conversion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;typedefs&quot;&gt;Typedefs&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Typedefs&lt;/strong&gt; allow the programmer to create an alias for a data type, and use the aliased name instead of the actual type name.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef double distance_t; // define distance_t as an alias for type double

// The following two statements are equivalent:
double howFar;
distance_t howFar;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;typedef names are declared using a “_t” suffix. This helps indicate that they are types, not variables, and also helps prevent naming collisions with similarly named variables.&lt;/p&gt;

&lt;p&gt;Using typedefs for legibility&lt;/p&gt;

&lt;p&gt;Using typedefs for easier code maintenance&lt;/p&gt;

&lt;p&gt;Platform independent coding&lt;/p&gt;

&lt;p&gt;Using typedefs to make complex types simple&lt;/p&gt;

&lt;p&gt;Rule: Use the using version of typedef instead of the typedef keyword if you compiler is C++11 compatible.&lt;/p&gt;

&lt;h2 id=&quot;structs&quot;&gt;Structs&lt;/h2&gt;

&lt;p&gt;An &lt;strong&gt;aggregate data&lt;/strong&gt; type is a data type that groups multiple individual variables together. One of the simplest aggregate data type is the struct.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;struct&lt;/strong&gt; (short for structure) allows us to group variables of mixed data types together into a single unit.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Employee
{
    short id;
    int age;
    double wage;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In order to access the individual members, we use the &lt;strong&gt;member selection operator&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Employee joe; // create an Employee struct for Joe
joe.id = 14; // assign a value to member id within struct joe
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Initializing structs by assigning values member by member is a little cumbersome, so C++ supports a faster way to initialize structs using an &lt;strong&gt;initializer list&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Employee joe = { 1, 32, 60000.0 };
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Non-static member initialization&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Triangle
{
    double length = 1.0;
    double width = 1.0;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-auto-keyword&quot;&gt;The auto keyword&lt;/h2&gt;

&lt;p&gt;The auto keyword was a way to explicitly specify that a variable should have automatic duration:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main()
{
    auto int foo(5); // explicitly specify that foo should have automatic duration

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When initializing a variable, the auto keyword can be used in place of the variable type to tell the compiler to infer the variable’s type from the assignment’s type. This is called &lt;strong&gt;automatic type deduction&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto d = 5.0; // 5.0 is a double literal, so d will be type double
auto i = 1 + 2; // 1 + 2 evaluates to an integer, so i will be type int
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Automatic type deduction for functions in C++14&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto add(int x, int y)
{
    return x + y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;trailing return syntax&lt;/strong&gt; where the return type is specified after the rest of the function prototype.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto add(int x, int y) -&amp;gt; int;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Starting with C++11, the auto keyword can be used in place of a variable’s type when doing an initialization in order to perform automatic type deduction.&lt;/p&gt;

&lt;p&gt;Other uses of the auto keyword should generally be avoided except on an as-needed basis.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 May 2016 08:08:58 -0700</pubDate>
        <link>http://heyl0822.github.io//_site/c++/2016/05/25/learn_c++_ch4_variable_scope_and_more_types.html</link>
        <guid isPermaLink="true">http://heyl0822.github.io//_site/c++/2016/05/25/learn_c++_ch4_variable_scope_and_more_types.html</guid>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Learn C++ Ch3 Operators</title>
        <description>&lt;h2 id=&quot;operator-precedence-and-associativity&quot;&gt;Operator precedence and associativity&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;operator precedence&lt;/strong&gt; The order in which operators are evaluated in a compound expression&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;associativity rules&lt;/strong&gt; tell the compiler whether to evaluate the operators from left to right or from right to left.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of operators&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Prec/Ass&lt;/th&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Pattern&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1 None&lt;/td&gt;
      &lt;td&gt;::&lt;/td&gt;
      &lt;td&gt;Global scope (unary)&lt;/td&gt;
      &lt;td&gt;::name&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;::&lt;/td&gt;
      &lt;td&gt;Class scope (binary)&lt;/td&gt;
      &lt;td&gt;class_name::member_name&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;()&lt;/td&gt;
      &lt;td&gt;Parenthesis&lt;/td&gt;
      &lt;td&gt;(expression)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;()&lt;/td&gt;
      &lt;td&gt;Function call&lt;/td&gt;
      &lt;td&gt;function_name(parameters)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;()&lt;/td&gt;
      &lt;td&gt;Initialization&lt;/td&gt;
      &lt;td&gt;type name(expression)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;{}&lt;/td&gt;
      &lt;td&gt;Uniform initialization (C++11)&lt;/td&gt;
      &lt;td&gt;type name{expression}&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;type()&lt;/td&gt;
      &lt;td&gt;Value construction&lt;/td&gt;
      &lt;td&gt;type(expression)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;type{}&lt;/td&gt;
      &lt;td&gt;Value construction (C++11)&lt;/td&gt;
      &lt;td&gt;type{expression}&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;Array subscript&lt;/td&gt;
      &lt;td&gt;pointer[expression]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;.&lt;/td&gt;
      &lt;td&gt;Member access from object&lt;/td&gt;
      &lt;td&gt;object.member_name&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;Member access from object ptr&lt;/td&gt;
      &lt;td&gt;object_pointer-&amp;gt;member_name&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;++&lt;/td&gt;
      &lt;td&gt;Post-increment&lt;/td&gt;
      &lt;td&gt;lvalue++&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;––&lt;/td&gt;
      &lt;td&gt;Post-decrement&lt;/td&gt;
      &lt;td&gt;lvalue––&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;typeid&lt;/td&gt;
      &lt;td&gt;Run-time type information&lt;/td&gt;
      &lt;td&gt;typeid(type) or typeid(expression)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;const_cast&lt;/td&gt;
      &lt;td&gt;Cast away const&lt;/td&gt;
      &lt;td&gt;const_cast&lt;type&gt;(expression)&lt;/type&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;dynamic_cast&lt;/td&gt;
      &lt;td&gt;Run-time type-checked cast&lt;/td&gt;
      &lt;td&gt;dynamic_cast&lt;type&gt;(expression)&lt;/type&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;reinterpret_cast&lt;/td&gt;
      &lt;td&gt;Cast one type to another&lt;/td&gt;
      &lt;td&gt;reinterpret_cast&lt;type&gt;(expression)&lt;/type&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;static_cast&lt;/td&gt;
      &lt;td&gt;Compile-time type-checked cast&lt;/td&gt;
      &lt;td&gt;static_cast&lt;type&gt;(expression)&lt;/type&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3 R-&amp;gt;L&lt;/td&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td&gt;Unary plus&lt;/td&gt;
      &lt;td&gt;+expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Unary minus&lt;/td&gt;
      &lt;td&gt;-expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;++&lt;/td&gt;
      &lt;td&gt;Pre-increment&lt;/td&gt;
      &lt;td&gt;++lvalue&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;––&lt;/td&gt;
      &lt;td&gt;Pre-decrement&lt;/td&gt;
      &lt;td&gt;––lvalue&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;!&lt;/td&gt;
      &lt;td&gt;Logical NOT&lt;/td&gt;
      &lt;td&gt;!expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;~&lt;/td&gt;
      &lt;td&gt;Bitwise NOT&lt;/td&gt;
      &lt;td&gt;~expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;(type)&lt;/td&gt;
      &lt;td&gt;C-style cast&lt;/td&gt;
      &lt;td&gt;(type)expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;sizeof&lt;/td&gt;
      &lt;td&gt;Size in bytes&lt;/td&gt;
      &lt;td&gt;sizeof(type) or sizeof(expression)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&amp;amp;&lt;/td&gt;
      &lt;td&gt;Address of&lt;/td&gt;
      &lt;td&gt;&amp;amp;lvalue&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;*&lt;/td&gt;
      &lt;td&gt;Dereference&lt;/td&gt;
      &lt;td&gt;*expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;new&lt;/td&gt;
      &lt;td&gt;Dynamic memory allocation&lt;/td&gt;
      &lt;td&gt;new type&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;new[]&lt;/td&gt;
      &lt;td&gt;Dynamic array allocation&lt;/td&gt;
      &lt;td&gt;new type[expression]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;delete&lt;/td&gt;
      &lt;td&gt;Dynamic memory deletion&lt;/td&gt;
      &lt;td&gt;delete pointer&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;delete[]&lt;/td&gt;
      &lt;td&gt;Dynamic array deletion&lt;/td&gt;
      &lt;td&gt;delete[] pointer&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;-&amp;gt;*&lt;/td&gt;
      &lt;td&gt;Member pointer selector&lt;/td&gt;
      &lt;td&gt;object_pointer-&amp;gt;*pointer_to_member&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;.*&lt;/td&gt;
      &lt;td&gt;Member object selector&lt;/td&gt;
      &lt;td&gt;object.*pointer_to_member&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;*&lt;/td&gt;
      &lt;td&gt;Multiplication&lt;/td&gt;
      &lt;td&gt;expression * expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;/&lt;/td&gt;
      &lt;td&gt;Division&lt;/td&gt;
      &lt;td&gt;expression / expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;%&lt;/td&gt;
      &lt;td&gt;Modulus&lt;/td&gt;
      &lt;td&gt;expression % expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td&gt;Addition&lt;/td&gt;
      &lt;td&gt;expression + expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Subtraction&lt;/td&gt;
      &lt;td&gt;expression - expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;«&lt;/td&gt;
      &lt;td&gt;Bitwise shift left&lt;/td&gt;
      &lt;td&gt;expression « expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;»&lt;/td&gt;
      &lt;td&gt;Bitwise shift right&lt;/td&gt;
      &lt;td&gt;expression » expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;&amp;lt;&lt;/td&gt;
      &lt;td&gt;Comparison less than&lt;/td&gt;
      &lt;td&gt;expression &amp;lt; expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&amp;lt;=&lt;/td&gt;
      &lt;td&gt;Comparison less than or equals&lt;/td&gt;
      &lt;td&gt;expression &amp;lt;= expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&amp;gt;&lt;/td&gt;
      &lt;td&gt;Comparison greater than&lt;/td&gt;
      &lt;td&gt;expression &amp;gt; expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&amp;gt;=&lt;/td&gt;
      &lt;td&gt;Comparison greater than or equals&lt;/td&gt;
      &lt;td&gt;expression &amp;gt;= expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;==&lt;/td&gt;
      &lt;td&gt;Equality&lt;/td&gt;
      &lt;td&gt;expression == expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;!=&lt;/td&gt;
      &lt;td&gt;Inequality&lt;/td&gt;
      &lt;td&gt;expression != expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;&amp;amp;&lt;/td&gt;
      &lt;td&gt;Bitwise AND&lt;/td&gt;
      &lt;td&gt;expression &amp;amp; expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td&gt;Bitwise XOR&lt;/td&gt;
      &lt;td&gt;expression ^ expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;|&lt;/td&gt;
      &lt;td&gt;Bitwise OR&lt;/td&gt;
      &lt;td&gt;expression | expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
      &lt;td&gt;Logical AND&lt;/td&gt;
      &lt;td&gt;expression &amp;amp;&amp;amp; expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;||&lt;/td&gt;
      &lt;td&gt;Logical OR&lt;/td&gt;
      &lt;td&gt;expression || expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;15 R-&amp;gt;L&lt;/td&gt;
      &lt;td&gt;?:&lt;/td&gt;
      &lt;td&gt;Conditional (see note below)&lt;/td&gt;
      &lt;td&gt;expression ? expression : expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;=&lt;/td&gt;
      &lt;td&gt;Assignment&lt;/td&gt;
      &lt;td&gt;lvalue = expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;*=&lt;/td&gt;
      &lt;td&gt;Multiplication assignment&lt;/td&gt;
      &lt;td&gt;lvalue *= expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;/=&lt;/td&gt;
      &lt;td&gt;Division assignment&lt;/td&gt;
      &lt;td&gt;lvalue /= expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;%=&lt;/td&gt;
      &lt;td&gt;Modulus assignment&lt;/td&gt;
      &lt;td&gt;lvalue %= expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;+=&lt;/td&gt;
      &lt;td&gt;Addition assignment&lt;/td&gt;
      &lt;td&gt;lvalue += expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;-=&lt;/td&gt;
      &lt;td&gt;Subtraction assignment&lt;/td&gt;
      &lt;td&gt;lvalue -= expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;«=&lt;/td&gt;
      &lt;td&gt;Bitwise shift left assignment&lt;/td&gt;
      &lt;td&gt;lvalue «= expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;»=&lt;/td&gt;
      &lt;td&gt;Bitwise shift right assignment&lt;/td&gt;
      &lt;td&gt;lvalue »= expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&amp;amp;=&lt;/td&gt;
      &lt;td&gt;Bitwise AND assignment&lt;/td&gt;
      &lt;td&gt;lvalue &amp;amp;= expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;=&lt;/td&gt;
      &lt;td&gt;Bitwise OR assignment&lt;/td&gt;
      &lt;td&gt;lvalue&lt;/td&gt;
      &lt;td&gt;= expression&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;^=&lt;/td&gt;
      &lt;td&gt;Bitwise XOR assignment&lt;/td&gt;
      &lt;td&gt;lvalue ^= expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16 R-&amp;gt;L&lt;/td&gt;
      &lt;td&gt;throw&lt;/td&gt;
      &lt;td&gt;Throw expression&lt;/td&gt;
      &lt;td&gt;throw expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;17 L-&amp;gt;R&lt;/td&gt;
      &lt;td&gt;,&lt;/td&gt;
      &lt;td&gt;Comma operator&lt;/td&gt;
      &lt;td&gt;expression, expression&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;arithmetic-operators&quot;&gt;Arithmetic operators&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Arithmetic operators&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;Form&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Unary plus&lt;/td&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td&gt;+x&lt;/td&gt;
      &lt;td&gt;Value of x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Unary minus&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-x&lt;/td&gt;
      &lt;td&gt;Negation of x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Binary arithmetic operators&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;Form&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Addition&lt;/td&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td&gt;x + y&lt;/td&gt;
      &lt;td&gt;x plus y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Subtraction&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;x - y&lt;/td&gt;
      &lt;td&gt;x minus y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Multiplication&lt;/td&gt;
      &lt;td&gt;*&lt;/td&gt;
      &lt;td&gt;x * y&lt;/td&gt;
      &lt;td&gt;x multiplied by y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Division&lt;/td&gt;
      &lt;td&gt;/&lt;/td&gt;
      &lt;td&gt;x / y&lt;/td&gt;
      &lt;td&gt;x divided by y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Modulus (Remainder)&lt;/td&gt;
      &lt;td&gt;%&lt;/td&gt;
      &lt;td&gt;x % y&lt;/td&gt;
      &lt;td&gt;The remainder of x divided by y&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Using static_cast&amp;lt;&amp;gt; to do floating point division with integers&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;int / int = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;double / int = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;int / double = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;double / double = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Modulus (remainder)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A warning about integer division and modulus with negative numbers prior to C++11&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Prior to C++11, if either of the operands of integer division are negative, the compiler is free to round up or down! For example, -5 / 2 can evaluate to either -3 or -2, depending on which way the compiler rounds. However, most modern compilers truncate towards 0 (so -5 / 2 would equal -2). The C++11 specification changed this to explicitly define that integer division should always truncate towards 0 (or put more simply, the fractional component is dropped).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also prior to C++11, if either operand of the modulus operator is negative, the results of the modulus can be either negative or positive! For example, -5 % 2 can evaluate to either 1 or -1. The C++11 specification tightens this up so that a % b always resolves to the sign of a.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arithmetic assignment operators&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;Form&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Assignment&lt;/td&gt;
      &lt;td&gt;=&lt;/td&gt;
      &lt;td&gt;x = y&lt;/td&gt;
      &lt;td&gt;Assign value y to x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Addition assignment&lt;/td&gt;
      &lt;td&gt;+=&lt;/td&gt;
      &lt;td&gt;x += y&lt;/td&gt;
      &lt;td&gt;Add y to x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Subtraction assignment&lt;/td&gt;
      &lt;td&gt;-=&lt;/td&gt;
      &lt;td&gt;x -= y&lt;/td&gt;
      &lt;td&gt;Subtract y from x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Multiplication assignment&lt;/td&gt;
      &lt;td&gt;*=&lt;/td&gt;
      &lt;td&gt;x *= y&lt;/td&gt;
      &lt;td&gt;Multiply x by y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Division assignment&lt;/td&gt;
      &lt;td&gt;/=&lt;/td&gt;
      &lt;td&gt;x /= y&lt;/td&gt;
      &lt;td&gt;Divide x by y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Modulus assignment&lt;/td&gt;
      &lt;td&gt;%=&lt;/td&gt;
      &lt;td&gt;x %= y&lt;/td&gt;
      &lt;td&gt;Put the remainder of x / y in x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;exponent operator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;cmath library &lt;code class=&quot;highlighter-rouge&quot;&gt;pow(base, exponent)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;incrementdecrement-operators-and-side-effects&quot;&gt;Increment/decrement operators, and side effects&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;Form&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Prefix increment (pre-increment)&lt;/td&gt;
      &lt;td&gt;++&lt;/td&gt;
      &lt;td&gt;++x&lt;/td&gt;
      &lt;td&gt;Increment x, then evaluate x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Prefix decrement (pre-decrement)&lt;/td&gt;
      &lt;td&gt;––&lt;/td&gt;
      &lt;td&gt;––x&lt;/td&gt;
      &lt;td&gt;Decrement x, then evaluate x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Postfix increment (post-increment)&lt;/td&gt;
      &lt;td&gt;++&lt;/td&gt;
      &lt;td&gt;x++&lt;/td&gt;
      &lt;td&gt;Evaluate x, then increment x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Postfix decrement (post-decrement)&lt;/td&gt;
      &lt;td&gt;––&lt;/td&gt;
      &lt;td&gt;x––&lt;/td&gt;
      &lt;td&gt;Evaluate x, then decrement x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Rule: Favor pre-increment and pre-decrement over post-increment and post-decrement. The prefix versions are not only more performant, you’re less likely to run into strange issues with them.&lt;/p&gt;

&lt;p&gt;A function or expression is said to have a side effect if it modifies some state (e.g. any stored information in memory), does input or output, or calls other functions that have side effects.&lt;/p&gt;

&lt;p&gt;Rule: Don’t use a variable that has a side effect applied to it more than once in a given statement.&lt;/p&gt;

&lt;h2 id=&quot;sizeof-comma-and-conditional-operators&quot;&gt;Sizeof, comma, and conditional operators&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Sizeof operator&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;Form&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Sizeof&lt;/td&gt;
      &lt;td&gt;sizeof&lt;/td&gt;
      &lt;td&gt;sizeof(type)&lt;/td&gt;
      &lt;td&gt;Returns size of type or variable in bytes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;sizeof(variable)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Comma operator&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;Form&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Comma&lt;/td&gt;
      &lt;td&gt;,&lt;/td&gt;
      &lt;td&gt;x, y&lt;/td&gt;
      &lt;td&gt;Evaluate x then y, returns value of y&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int x = 0;
int y = 2;
int z = (++x, ++y); // increment x and y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;z would be assigned the result of evaluating ++y&lt;/p&gt;

&lt;p&gt;Note that comma has the lowest precedence of all the operators, even lower than assignment.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;z = (a, b); // evaluate (a, b) first to get result of b, then assign that value to variable z.
z = a, b; // evaluates as &quot;(z = a), b&quot;, so z gets assigned the value of a, and b is discarded.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Rule: Avoid using the comma operator, except within for loops.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conditional operator&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;Form&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Conditional&lt;/td&gt;
      &lt;td&gt;?:&lt;/td&gt;
      &lt;td&gt;c ? x : y&lt;/td&gt;
      &lt;td&gt;If c is nonzero (true) then evaluate x, otherwise evaluate y&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;larger = (x &amp;gt; y) ? x : y;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Keep in mind that the ?: operator has a very low precedence. If doing anything other than assigning the result to a variable, the ?: statement needs to be wrapped in parenthesis.&lt;/p&gt;

&lt;p&gt;Rule: Only use the conditional operator for simple conditionals where it enhances readability.&lt;/p&gt;

&lt;h2 id=&quot;relational-operators&quot;&gt;Relational operators&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;Form&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Greater than&lt;/td&gt;
      &lt;td&gt;&amp;gt;&lt;/td&gt;
      &lt;td&gt;x &amp;gt; y&lt;/td&gt;
      &lt;td&gt;true if x is greater than y, false otherwise&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Less than&lt;/td&gt;
      &lt;td&gt;&amp;lt;&lt;/td&gt;
      &lt;td&gt;x &amp;lt; y&lt;/td&gt;
      &lt;td&gt;true if x is less than y, false otherwise&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Greater than or equals&lt;/td&gt;
      &lt;td&gt;&amp;gt;=&lt;/td&gt;
      &lt;td&gt;x &amp;gt;= y&lt;/td&gt;
      &lt;td&gt;true if x is greater than or equal to y, false otherwise&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Less than or equals&lt;/td&gt;
      &lt;td&gt;&amp;lt;=&lt;/td&gt;
      &lt;td&gt;x &amp;lt;= y&lt;/td&gt;
      &lt;td&gt;true if x is less than or equal to y, false otherwise&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Equality&lt;/td&gt;
      &lt;td&gt;==&lt;/td&gt;
      &lt;td&gt;x == y&lt;/td&gt;
      &lt;td&gt;true if x equals y, false otherwise&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Inequality&lt;/td&gt;
      &lt;td&gt;!=&lt;/td&gt;
      &lt;td&gt;x != y&lt;/td&gt;
      &lt;td&gt;true if x does not equal y, false otherwise&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Comparison of floating point values&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Directly comparing floating point values using any of these operators is dangerous. This is because small rounding errors in the floating point operands may cause unexpected results.&lt;/p&gt;

&lt;p&gt;The most common method of doing floating point equality involves using a function that calculates how close the two values are to each other. If the two numbers are “close enough”, then we call them equal. The value used to represent “close enough” is traditionally called &lt;strong&gt;epsilon&lt;/strong&gt;. Epsilon is generally defined as a small number (e.g. 0.0000001).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;really&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rounding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;approximatelyEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;almost 1.0&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;approximatelyEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;almost 0.0&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;approximatelyEqualAbsRel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;almost 0.0&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;logical-operators&quot;&gt;Logical operators&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;Form&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Logical NOT&lt;/td&gt;
      &lt;td&gt;!&lt;/td&gt;
      &lt;td&gt;!x&lt;/td&gt;
      &lt;td&gt;true if x is false, or false if x is true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Logical AND&lt;/td&gt;
      &lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
      &lt;td&gt;x &amp;amp;&amp;amp; y&lt;/td&gt;
      &lt;td&gt;true if both x and y are true, false otherwise&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Logical OR&lt;/td&gt;
      &lt;td&gt;||&lt;/td&gt;
      &lt;td&gt;x || y&lt;/td&gt;
      &lt;td&gt;true if either x or y are true, false otherwise&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Logical NOT (operator !)&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Right operand&lt;/th&gt;
      &lt;th&gt;Result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;logical NOT operator has higher precedence than the equality operator, the expression &lt;code class=&quot;highlighter-rouge&quot;&gt;! x == y&lt;/code&gt; actually evaluates as &lt;code class=&quot;highlighter-rouge&quot;&gt;(!x) == y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Rule: If logical NOT is intended to operate on the result of other operators, the other operators and their operands need to be enclosed in parenthesis.&lt;/p&gt;

&lt;p&gt;Rule: It’s a good idea to always use parenthesis to make your intent clear – that way, you don’t even have to remember the precedence rules.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;**Logical OR (operator&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;)**&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The logical OR operator is used to test whether either of two conditions is true.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Left operand&lt;/th&gt;
      &lt;th&gt;Right operand&lt;/th&gt;
      &lt;th&gt;Result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Logical AND (operator &amp;amp;&amp;amp;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The logical AND operator is used to test whether both conditions are true.&lt;/p&gt;

&lt;p&gt;Left operand	Right operand	Result
false	false	false
false	true	false
true	false	false
true	true	true&lt;/p&gt;

&lt;p&gt;In order for logical AND to return true, both operands must evaluate to true. If the first operand evaluates to false, logical AND knows it must return false regardless of whether the second operand evaluates to true or false. In this case, the logical AND operator will go ahead and return false immediately without even evaluating the second operand! This is known as &lt;strong&gt;short circuit evaluation&lt;/strong&gt;, and it is done primarily for optimization purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;De Morgan’s law&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!(x &amp;amp;&amp;amp; y) is equivalent to !x || !y
!(x || y) is equivalent to !x &amp;amp;&amp;amp; !y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Logical XOR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Left operand	Right operand	Result
false	false	false
false	true	true
true	false	true
true	true	false&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (a != b) ... // a XOR b, assuming a and b are booleans
if (a != b != c != d) ... // a XOR b XOR c XOR d, assuming a, b, c, and d are booleans
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you need a form of XOR that works with non-boolean operands, you can use this slightly more complicated form:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (!a != !b) ... //a XOR b, works on any data types that can be converted to bool
if (!a != !b != !c != !d) ... // a XOR b XOR c XOR d, for any type that can be converted to bool
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;converting-between-binary-and-decimal&quot;&gt;Converting between binary and decimal&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Converting binary to decimal&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;148 / 2 = 74 r0
74 / 2 = 37 r0
37 / 2 = 18 r1
18 / 2 = 9 r0
9 / 2 = 4 r1
4 / 2 = 2 r0
2 / 2 = 1 r0
1 / 2 = 0 r1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Writing all of the remainders from the bottom up: 1001 0100&lt;/p&gt;

&lt;p&gt;The second method involves working backwards to figure out what each of the bits must be. This method can be easier with small binary numbers.&lt;/p&gt;

&lt;p&gt;Is 148 &amp;gt;= 128? Yes, so the 128 bit must be 1. 148 - 128 = 20, which means we need to find bits worth 20 more.
Is 20 &amp;gt;= 64? No, so the 64 bit must be 0.
Is 20 &amp;gt;= 32? No, so the 32 bit must be 0.
Is 20 &amp;gt;= 16? Yes, so the 16 bit must be 1. 20 - 16 = 4, which means we need to find bits worth 4 more.&lt;/p&gt;

&lt;p&gt;Is 4 &amp;gt;= 8? No, so the 8 bit must be 0.
Is 4 &amp;gt;= 4? Yes, so the 4 bit must be 1. 4 - 4 = 0, which means all the rest of the bits must be 0.&lt;/p&gt;

&lt;p&gt;148 = (1 * 128) + (0 * 64) + (0 * 32) + (1 * 16) + (0 * 8) + (1 * 4) + (0 * 2) + (0 * 1) = 1001 0100&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signed numbers and two’s complement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Signed integers are typically stored using a method known as &lt;strong&gt;two’s complement&lt;/strong&gt;. In two’s complement, the leftmost (most significant) bit is used as the sign bit. A 0 sign bit means the number is positive, and a 1 sign bit means the number is negative.&lt;/p&gt;

&lt;p&gt;Converting -76 to binary:&lt;/p&gt;

&lt;p&gt;Positive 76 in binary: 0100 1100
Invert all the bits: 1011 0011
Add 1: 1011 0100&lt;/p&gt;

&lt;p&gt;Why do we add 1? Consider the number 0. If a negative value was simply represented as the inverse of the positive number, 0 would have two representations: 0000 0000 (positive zero) and 1111 1111 (negative zero). By adding 1, 1111 1111 intentionally overflows and becomes 0000 0000. This prevents 0 from having two representations, and simplifies some of the internal logic needed to do arithmetic with negative numbers.&lt;/p&gt;

&lt;p&gt;For example, to convert 1001 1110 from two’s complement into a decimal number:
Given: 1001 1110
Invert the bits: 0110 0001
Add 1: 0110 0010
Convert to decimal: (0 * 128) + (1 * 64) + (1 * 32) + (0 * 16) + (0 * 8) + (0 * 4) + (1 * 2) + (0 * 1) = 64 + 32 + 2 = 98
Since the original sign bit was negative, the final value is -98.&lt;/p&gt;

&lt;h2 id=&quot;bitwise-operators&quot;&gt;Bitwise operators&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;Form&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;left shift&lt;/td&gt;
      &lt;td&gt;«&lt;/td&gt;
      &lt;td&gt;x « y&lt;/td&gt;
      &lt;td&gt;all bits in x shifted left y bits&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;right shift&lt;/td&gt;
      &lt;td&gt;»&lt;/td&gt;
      &lt;td&gt;x » y&lt;/td&gt;
      &lt;td&gt;all bits in x shifted right y bits&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bitwise NOT&lt;/td&gt;
      &lt;td&gt;~&lt;/td&gt;
      &lt;td&gt;~x&lt;/td&gt;
      &lt;td&gt;all bits in x flipped&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bitwise AND&lt;/td&gt;
      &lt;td&gt;&amp;amp;&lt;/td&gt;
      &lt;td&gt;x &amp;amp; y&lt;/td&gt;
      &lt;td&gt;each bit in x AND each bit in y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bitwise OR&lt;/td&gt;
      &lt;td&gt;|&lt;/td&gt;
      &lt;td&gt;x | y&lt;/td&gt;
      &lt;td&gt;each bit in x OR each bit in y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bitwise XOR&lt;/td&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td&gt;x ^ y&lt;/td&gt;
      &lt;td&gt;each bit in x XOR each bit in y&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Rule: When dealing with bit operators, use unsigned integers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bitwise assignment operators&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;Form&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Left shift assignment&lt;/td&gt;
      &lt;td&gt;«=&lt;/td&gt;
      &lt;td&gt;x «= y&lt;/td&gt;
      &lt;td&gt;Shift x left by y bits&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Right shift assignment&lt;/td&gt;
      &lt;td&gt;»=&lt;/td&gt;
      &lt;td&gt;x »= y&lt;/td&gt;
      &lt;td&gt;Shift x right by y bits&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bitwise OR assignment&lt;/td&gt;
      &lt;td&gt;|=&lt;/td&gt;
      &lt;td&gt;x |= y&lt;/td&gt;
      &lt;td&gt;Assign x | y to x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bitwise AND assignment&lt;/td&gt;
      &lt;td&gt;&amp;amp;=&lt;/td&gt;
      &lt;td&gt;x &amp;amp;= y&lt;/td&gt;
      &lt;td&gt;Assign x &amp;amp; y to x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bitwise XOR assignment&lt;/td&gt;
      &lt;td&gt;^=&lt;/td&gt;
      &lt;td&gt;x ^= y&lt;/td&gt;
      &lt;td&gt;Assign x ^ y to x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Bit flags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In storage-intensive cases where we have lots of related boolean options, it can be useful to “pack” 8 individual booleans into a single byte for storage efficiency purposes. These individual bits are called &lt;strong&gt;bit flags&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Define&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;these&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;represent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whatever&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;uint8_t&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instead&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;unsigned char&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0001&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0010&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x04&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0100&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x08&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0001&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0010&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0100&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt;

    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hold&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combination&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;above&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myflags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To query a bit state, we use bitwise AND:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (myflags &amp;amp; option4) ... // if option4 is set, do something
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To turn a bit on, we use bitwise OR:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myflags |= option4; // turn option 4 on.
myflags |= option4 | option5; // turn options 4 and 5 on.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To turn a bit off, we use bitwise AND with an inverse bit pattern:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myflags &amp;amp;= ~option4; // turn option 4 off
myflags &amp;amp;= ~option4 &amp;amp; ~option5; // turn option4 and 5 off.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To toggle a bit state, we use bitwise XOR:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myflags ^= option4; // flip option4 from on to off, or vice versa
myflags ^= option4 | option5; // flip options 4 and 5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bit flags are typically used in two cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When you have many sets of identical bitflags.&lt;/li&gt;
  &lt;li&gt;When have many different options.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;std::bitset&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;C++ standard library comes with functionality called std::bitset that helps us manage bit flags.&lt;/p&gt;

&lt;p&gt;To create a std::bitset, you need to include the bitset header, and then define a std::bitset variable indicating how many bits are needed. The number of bits must be a compile time constant.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;bitset&amp;gt;

std::bitset&amp;lt;8&amp;gt; bits; // we need 8 bits
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If desired, the bitset can be initialized with an initial set of values:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;bitset&amp;gt;

std::bitset&amp;lt;8&amp;gt; bits(option1 | option2) ; // start with option 1 and 2 turned on
std::bitset&amp;lt;8&amp;gt; morebits(0x4) ; // start with bit pattern 0000 0100
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::bitset&lt;/code&gt; provides 4 key functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;test() allows us to query whether a bit is a 0 or 1&lt;/li&gt;
  &lt;li&gt;set() allows us to turn a bit on (this will do nothing if the bit is already on)&lt;/li&gt;
  &lt;li&gt;reset() allows us to turn a bit off (this will do nothing if the bit is already off)&lt;/li&gt;
  &lt;li&gt;flip() allows us to flip a bit from a 0 to a 1 or vice versa&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bit masks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The principles for bit flags can be extended to turn on, turn off, toggle, or query multiple bits at once, in a bit single operation. When we bundle individual bits together for the purpose of modifying them as a group, this is called a &lt;strong&gt;bit mask&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;quick-review&quot;&gt;Quick review&lt;/h2&gt;

&lt;p&gt;Always use parentheses to disambiguate the precedence of operators if there is any question or opportunity for confusion.&lt;/p&gt;

&lt;p&gt;The arithmetic operators all work like they do in normal mathematics. The Modulus (%) operator returns the remainder from an integer division. Beware about rounding or sign errors when the operands of integer division and modulus are negative.&lt;/p&gt;

&lt;p&gt;The increment and decrement operators can be used to easily increment or decrement numbers. Beware of side effects, particular when it comes to the order that function parameters are evaluated. Do not use a variable that has a side effect applied more than once in a given statement.&lt;/p&gt;

&lt;p&gt;Relational operators can be used to compare floating point numbers. Beware using equality and inequality on floating point numbers.&lt;/p&gt;

&lt;p&gt;Logical operators allow us to form compound conditional statements. Bitwise operators allow us to modify or query individual bits.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 May 2016 09:01:01 -0700</pubDate>
        <link>http://heyl0822.github.io//_site/c++/2016/05/23/learn_c++_ch3_Operators.html</link>
        <guid isPermaLink="true">http://heyl0822.github.io//_site/c++/2016/05/23/learn_c++_ch3_Operators.html</guid>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Learn C++ Ch2 Variables and Fundamental Data Types</title>
        <description>&lt;h2 id=&quot;fundamental-variable-definition-initialization-and-assignment&quot;&gt;Fundamental variable definition, initialization, and assignment&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Addresses:&lt;/strong&gt; Memory is organized into sequential units&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Byte:&lt;/strong&gt; The smallest addressable unit of memory is a group of 8 bits&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fundamental data types:&lt;/strong&gt; basic types, primitive types, or built-in types.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th&gt;Types&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
      &lt;th&gt;Example&lt;/th&gt;
      &lt;th&gt;Notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;boolean&lt;/td&gt;
      &lt;td&gt;bool&lt;/td&gt;
      &lt;td&gt;true or false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;character&lt;/td&gt;
      &lt;td&gt;char, wchar_t, char16_t, char32_t&lt;/td&gt;
      &lt;td&gt;a single ASCII character&lt;/td&gt;
      &lt;td&gt;‘c’&lt;/td&gt;
      &lt;td&gt;char16_t, char32_t are C++11 only&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;floating point&lt;/td&gt;
      &lt;td&gt;float, double, long double&lt;/td&gt;
      &lt;td&gt;a number with a decimal&lt;/td&gt;
      &lt;td&gt;3.14159&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;integer&lt;/td&gt;
      &lt;td&gt;short, int, long, long long&lt;/td&gt;
      &lt;td&gt;a whole number&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;long long is C99/C++11 only&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;void&lt;/td&gt;
      &lt;td&gt;no type&lt;/td&gt;
      &lt;td&gt;void	n/a&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Defining a variable:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Type varName;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Variable initialization&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;copy initialization: &lt;code class=&quot;highlighter-rouge&quot;&gt;int nValue = 5;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;direct initialization: &lt;code class=&quot;highlighter-rouge&quot;&gt;int nValue(5);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Uniform initialization: &lt;code class=&quot;highlighter-rouge&quot;&gt;int value{5}; int value{}; // default initialization to 0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rule: Favor direct initialization over copy initialization&lt;/p&gt;

&lt;p&gt;Rule: If you’re using a C++11 compatible compiler, favor uniform initialization&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Variable assignment&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;copy assignment: &lt;code class=&quot;highlighter-rouge&quot;&gt;int nValue; nValue = 5;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rule: Avoid defining multiple variables on a single line if initializing any of them.&lt;/p&gt;

&lt;p&gt;Rule: Define variables as close to their first use as possible.&lt;/p&gt;

&lt;h2 id=&quot;void&quot;&gt;Void&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;As a way to indicate that a function does not return a value&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As a way to indicate that a function does not take any parameters&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;variable-sizes-and-the-sizeof-operator&quot;&gt;Variable sizes and the sizeof operator&lt;/h2&gt;

&lt;p&gt;n bits can hold \( 2^n \)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The size of C++ basic data types&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Minimum Size&lt;/th&gt;
      &lt;th&gt;Note&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;boolean&lt;/td&gt;
      &lt;td&gt;bool&lt;/td&gt;
      &lt;td&gt;1 byte&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;character&lt;/td&gt;
      &lt;td&gt;char&lt;/td&gt;
      &lt;td&gt;1 byte&lt;/td&gt;
      &lt;td&gt;May be signed or unsigned&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;wchar_t&lt;/td&gt;
      &lt;td&gt;1 byte&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;char16_t&lt;/td&gt;
      &lt;td&gt;2 bytes&lt;/td&gt;
      &lt;td&gt;C++11 type&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;char32_t&lt;/td&gt;
      &lt;td&gt;4 bytes&lt;/td&gt;
      &lt;td&gt;C++11 type&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;integer&lt;/td&gt;
      &lt;td&gt;short&lt;/td&gt;
      &lt;td&gt;2 bytes&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;int&lt;/td&gt;
      &lt;td&gt;2 bytes&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;long&lt;/td&gt;
      &lt;td&gt;4 bytes&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;long long&lt;/td&gt;
      &lt;td&gt;8 bytes&lt;/td&gt;
      &lt;td&gt;C99/C++11 type&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;floating point&lt;/td&gt;
      &lt;td&gt;float&lt;/td&gt;
      &lt;td&gt;4 bytes&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;double&lt;/td&gt;
      &lt;td&gt;8 bytes&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;long double&lt;/td&gt;
      &lt;td&gt;8 bytes&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;the actual size of the variables may be different on your machine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sizeof operator&lt;/strong&gt; a unary operator that takes either a type or a variable, and returns its size in bytes. The sizeof operator is one of only three operators in C++ that are a word instead of a symbol. The other two are new and delete.&lt;/p&gt;

&lt;h2 id=&quot;integers&quot;&gt;Integers&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;integer&lt;/strong&gt; a variable that can only hold non-fractional numbers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;signed&lt;/strong&gt; a variable that can hold both negative and positive numbers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;unsigned&lt;/strong&gt; can only hold positive values.&lt;/p&gt;

&lt;p&gt;n-bit signed variable has a range of \( -( 2^{n-1} ) \) to \( 2^{n-1}-1 \).&lt;/p&gt;

&lt;p&gt;An n-bit unsigned variable has a range of 0 to \( (2^n)-1 \).&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Size/Type&lt;/th&gt;
      &lt;th&gt;Range&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1 byte signed&lt;/td&gt;
      &lt;td&gt;-128 to 127&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1 byte unsigned&lt;/td&gt;
      &lt;td&gt;0 to 255&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2 byte signed&lt;/td&gt;
      &lt;td&gt;-32,768 to 32,767&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2 byte unsigned&lt;/td&gt;
      &lt;td&gt;0 to 65,535&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4 byte signed&lt;/td&gt;
      &lt;td&gt;-2,147,483,648 to 2,147,483,647&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4 byte unsigned&lt;/td&gt;
      &lt;td&gt;0 to 4,294,967,295&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8 byte signed&lt;/td&gt;
      &lt;td&gt;-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8 byte unsigned&lt;/td&gt;
      &lt;td&gt;0 to 18,446,744,073,709,551,615&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Default Sign&lt;/th&gt;
      &lt;th&gt;Note&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;character&lt;/td&gt;
      &lt;td&gt;char&lt;/td&gt;
      &lt;td&gt;Signed or Unsigned&lt;/td&gt;
      &lt;td&gt;Usually signed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;integer&lt;/td&gt;
      &lt;td&gt;short&lt;/td&gt;
      &lt;td&gt;Signed&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;int&lt;/td&gt;
      &lt;td&gt;Signed&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;long&lt;/td&gt;
      &lt;td&gt;Signed&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;long long&lt;/td&gt;
      &lt;td&gt;Signed&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Overflow&lt;/strong&gt; when bits are lost because a variable has not been allocated enough memory to store them.&lt;/p&gt;

&lt;p&gt;Rule: Favor signed integers over unsigned integers&lt;/p&gt;

&lt;p&gt;Rule: Do not depend on the results of overflow in your program.&lt;/p&gt;

&lt;p&gt;Rule: Be careful when using integer division, as you will lose any fractional parts of the result&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fixed-width integers&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Range&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;int8_t&lt;/td&gt;
      &lt;td&gt;1 byte signed&lt;/td&gt;
      &lt;td&gt;-128 to 127&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uint8_t&lt;/td&gt;
      &lt;td&gt;1 byte unsigned&lt;/td&gt;
      &lt;td&gt;0 to 255&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;int16_t&lt;/td&gt;
      &lt;td&gt;2 byte signed&lt;/td&gt;
      &lt;td&gt;-32,768 to 32,767&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uint16_t&lt;/td&gt;
      &lt;td&gt;2 byte unsigned&lt;/td&gt;
      &lt;td&gt;0 to 65,535&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;int32_t&lt;/td&gt;
      &lt;td&gt;4 byte signed&lt;/td&gt;
      &lt;td&gt;-2,147,483,648 to 2,147,483,647&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uint32_t&lt;/td&gt;
      &lt;td&gt;4 byte unsigned&lt;/td&gt;
      &lt;td&gt;0 to 4,294,967,295&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;int64_t&lt;/td&gt;
      &lt;td&gt;8 byte signed&lt;/td&gt;
      &lt;td&gt;-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uint64_t&lt;/td&gt;
      &lt;td&gt;8 byte unsigned&lt;/td&gt;
      &lt;td&gt;0 to 18,446,744,073,709,551,615&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Warning: int8_t and uint8_t may or may not behave like chars&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;int can be used when the integer size doesn’t matter and isn’t going to be large.&lt;/li&gt;
  &lt;li&gt;Fixed-width integers should be used in all other cases, especially when you need an integer with a guaranteed width.&lt;/li&gt;
  &lt;li&gt;Only use unsigned types if you have a compelling reason.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;floating-point-numbers&quot;&gt;Floating point numbers&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;floating point type variable&lt;/strong&gt; is a variable that can hold a real number. float, double, and long double.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Minimum Size&lt;/th&gt;
      &lt;th&gt;Typical Size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;floating point&lt;/td&gt;
      &lt;td&gt;float&lt;/td&gt;
      &lt;td&gt;4 bytes&lt;/td&gt;
      &lt;td&gt;4 bytes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;double&lt;/td&gt;
      &lt;td&gt;4 bytes&lt;/td&gt;
      &lt;td&gt;8 bytes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;long double&lt;/td&gt;
      &lt;td&gt;4 bytes&lt;/td&gt;
      &lt;td&gt;8, 12, or 16 bytes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int n(5); // 5 means integer
double d(5.0); // 5.0 means floating point (double by default)
float f(5.0f); // 5.0 means floating point, f suffix means float
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Scientific notation&lt;/strong&gt; is a useful shorthand for writing lengthy numbers in a concise manner.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;double d1(5000.0);
double d2(5e3); // another way to assign 5000

double d3(0.05);
double d4(5e-2); // another way to assign 0.05
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;convert numbers to scientific notation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your exponent starts at zero.&lt;/li&gt;
  &lt;li&gt;Slide the decimal so there is only one non-zero digit to the left of the decimal.&lt;/li&gt;
  &lt;li&gt;Each place you slide the decimal to the left increases the exponent by 1.&lt;/li&gt;
  &lt;li&gt;Each place you slide the decimal to the right decreases the exponent by 1.&lt;/li&gt;
  &lt;li&gt;Trim off any leading zeros (on the left end)&lt;/li&gt;
  &lt;li&gt;Trim off any trailing zeros (on the right end) if the original number had no decimal point. We’re assuming they’re not significant unless otherwise specified.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The digits in the significand (the part before the E) are called the &lt;strong&gt;significant digits&lt;/strong&gt;. The number of significant digits defines a number’s &lt;strong&gt;precision&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Start with: 600.410
Slide decimal left 2 spaces: 6.00410e2
No leading zeros to trim: 6.00410e2
Don&#39;t trim trailing zeros: 6.00410e2 (6 significant digits)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;cout has a default precision of 6&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;std::cout &amp;lt;&amp;lt; std::setprecision(16); // show 16 digits
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Float values have between 6 and 9 digits of precision, with most float values having at least 7 significant digits. Double values have between 15 and 18 digits of precision. Long double has a minimum precision of 15, 18, or 33 significant digits depending on how many bytes it occupies.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Size&lt;/th&gt;
      &lt;th&gt;Range&lt;/th&gt;
      &lt;th&gt;Precision&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;4 bytes&lt;/td&gt;
      &lt;td&gt;±1.18 x 10-38 to ±3.4 x 1038&lt;/td&gt;
      &lt;td&gt;6-9 significant digits, typically 7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8 bytes&lt;/td&gt;
      &lt;td&gt;±2.23 x 10-308 to ±1.80 x 10308&lt;/td&gt;
      &lt;td&gt;15-18 significant digits, typically 16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;80-bits (12 bytes)&lt;/td&gt;
      &lt;td&gt;±3.36 x 10-4932 to ±1.18 x 104932&lt;/td&gt;
      &lt;td&gt;18-21 significant digits&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16 bytes&lt;/td&gt;
      &lt;td&gt;±3.36 x 10-4932 to ±1.18 x 104932&lt;/td&gt;
      &lt;td&gt;33-36 significant digits&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Rule: Favor double over float unless space is at a premium, as the lack of precision in a float will often lead to inaccuracies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inf&lt;/strong&gt; which represents infinity. Inf can be positive or negative. &lt;strong&gt;NaN&lt;/strong&gt; which stands for “Not a Number”.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Floating point numbers are great for storing very large or very small numbers, including those with fractional components, so long as they have a limited number of significant digits (precision).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Floating point numbers often have small rounding errors, even when the number has fewer significant digits than the precision. Many times these go unnoticed because they are so small, and because the numbers are truncated for output. Consequently, comparisons of floating point numbers may not give the expected results. Performing mathematical operations on these values will cause the rounding errors to grow larger.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;boolean-values&quot;&gt;Boolean values&lt;/h2&gt;

&lt;p&gt;To declare a boolean variable, we use the keyword &lt;strong&gt;bool&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bool b;
bool b1 = true; // copy initialization
bool b2(false); // direct initialization
bool b3 { true }; // uniform initialization (C++11)

std::cout &amp;lt;&amp;lt; std::boolalpha; // print bools as true or false
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Boolean values are also useful as the return values for functions that check whether something is true or not. Such functions are typically named starting with the word &lt;strong&gt;is&lt;/strong&gt; (e.g. isEqual) or &lt;strong&gt;has&lt;/strong&gt; (e.g. hasCommonFactor).&lt;/p&gt;

&lt;h2 id=&quot;chars&quot;&gt;Chars&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;type cast&lt;/strong&gt; creates a value of one type from a value of another type. To convert between fundamental data types (for example, from a char to an int, or vice versa), we use a type cast called a &lt;strong&gt;static cast&lt;/strong&gt;. static casting doesn’t do any range checking&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static_cast&amp;lt;new_type&amp;gt;(expression)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;static_cast&lt;/strong&gt; is the first cast you should attempt to use. It does things like implicit conversions between types (such as int to float, or pointer to void*), and it can also call explicit conversion functions (or implicit ones). In many cases, explicitly stating static_cast isn’t necessary, but it’s important to note that the T(something) syntax is equivalent to (T)something and should be avoided (more on that later). A T(something, something_else) is safe, however, and guaranteed to call the constructor.&lt;/p&gt;

    &lt;p&gt;static_cast can also cast through inheritance hierarchies. It is unnecessary when casting upwards (towards a base class), but when casting downwards it can be used as long as it doesn’t cast through virtual inheritance. It does not do checking, however, and it is undefined behavior to static_cast down a hierarchy to a type that isn’t actually the type of the object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;const_cast&lt;/strong&gt; can be used to remove or add const to a variable; no other C++ cast is capable of removing it (not even reinterpret_cast). It is important to note that modifying a formerly const value is only undefined if the original variable is const; if you use it to take the const off a reference to something that wasn’t declared with const, it is safe. This can be useful when overloading member functions based on const, for instance. It can also be used to add const to an object, such as to call a member function overload.&lt;/p&gt;

    &lt;p&gt;const_cast also works similarly on volatile, though that’s less common.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;dynamic_cast&lt;/strong&gt; is almost exclusively used for handling polymorphism. You can cast a pointer or reference to any polymorphic type to any other class type (a polymorphic type has at least one virtual function, declared or inherited). You can use it for more than just casting downwards – you can cast sideways or even up another chain. The dynamic_cast will seek out the desired object and return it if possible. If it can’t, it will return nullptr in the case of a pointer, or throw std::bad_cast in the case of a reference.&lt;/p&gt;

    &lt;p&gt;dynamic_cast has some limitations, though. It doesn’t work if there are multiple objects of the same type in the inheritance hierarchy (the so-called ‘dreaded diamond’) and you aren’t using virtual inheritance. It also can only go through public inheritance - it will always fail to travel through protected or private inheritance. This is rarely an issue, however, as such forms of inheritance are rare.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;reinterpret_cast&lt;/strong&gt; is the most dangerous cast, and should be used very sparingly. It turns one type directly into another - such as casting the value from one pointer to another, or storing a pointer in an int, or all sorts of other nasty things. Largely, the only guarantee you get with reinterpret_cast is that normally if you cast the result back to the original type, you will get the exact same value (but not if the intermediate type is smaller than the original type). There are a number of conversions that reinterpret_cast cannot do, too. It’s used primarily for particularly weird conversions and bit manipulations, like turning a raw data stream into actual data, or storing data in the low bits of an aligned pointer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Escape sequences&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alert&lt;/td&gt;
      &lt;td&gt;\a&lt;/td&gt;
      &lt;td&gt;Makes an alert, such as a beep&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Backspace&lt;/td&gt;
      &lt;td&gt;\b&lt;/td&gt;
      &lt;td&gt;Moves the cursor back one space&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Formfeed&lt;/td&gt;
      &lt;td&gt;\f&lt;/td&gt;
      &lt;td&gt;Moves the cursor to next logical page&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Newline&lt;/td&gt;
      &lt;td&gt;\n&lt;/td&gt;
      &lt;td&gt;Moves cursor to next line&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Carriage return&lt;/td&gt;
      &lt;td&gt;\r&lt;/td&gt;
      &lt;td&gt;Moves cursor to beginning of line&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Horizontal tab&lt;/td&gt;
      &lt;td&gt;\t&lt;/td&gt;
      &lt;td&gt;Prints a horizontal tab&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Vertical tab&lt;/td&gt;
      &lt;td&gt;\v&lt;/td&gt;
      &lt;td&gt;Prints a vertical tab&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Single quote&lt;/td&gt;
      &lt;td&gt;\’&lt;/td&gt;
      &lt;td&gt;Prints a single quote&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Double quote&lt;/td&gt;
      &lt;td&gt;\”&lt;/td&gt;
      &lt;td&gt;Prints a double quote&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Backslash&lt;/td&gt;
      &lt;td&gt;\&lt;/td&gt;
      &lt;td&gt;Prints a backslash&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Question mark&lt;/td&gt;
      &lt;td&gt;\?&lt;/td&gt;
      &lt;td&gt;Prints a question mark&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Octal number&lt;/td&gt;
      &lt;td&gt;(number)&lt;/td&gt;
      &lt;td&gt;Translates into char represented by octal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hex number&lt;/td&gt;
      &lt;td&gt;\x(number)&lt;/td&gt;
      &lt;td&gt;Translates into char represented by hex number&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When std::cout is used for output, the output may be buffered – that is, std::cout may not send the text to the output device immediately (for performance reasons). Both ‘\n’ and std::endl will move the cursor to the next line. In addition, std::endl will also ensure that any queued output is actually output before continuing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use std::endl when you need to ensure your output is output immediately (e.g. when writing a record to a file, or when updating a progress bar). Note that this may have a performance cost, particularly if writing to the output device is slow (e.g. when writing a file to a disk).&lt;/li&gt;
  &lt;li&gt;Use ‘\n’ in other cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;wchar_t, char16_t, and char32_t&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;wchar_t should be avoided in almost all cases (except when interfacing with the Windows API). Its size is implementation defined, and is not reliable. It has largely been deprecated.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;char16_t and char32_t were added to C++11 to provide explicit support for 16-bit and 32-bit Unicode characters (8-bit Unicode characters are already supported by the normal char type).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;literals&quot;&gt;Literals&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Literal constants&lt;/strong&gt; are literal numbers inserted into the code.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Data&lt;/th&gt;
      &lt;th&gt;Type	Suffix&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;int&lt;/td&gt;
      &lt;td&gt;u or U&lt;/td&gt;
      &lt;td&gt;unsigned int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;int&lt;/td&gt;
      &lt;td&gt;l or L&lt;/td&gt;
      &lt;td&gt;long&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;int&lt;/td&gt;
      &lt;td&gt;ul, uL, Ul, UL, lu, lU, Lu, or LU&lt;/td&gt;
      &lt;td&gt;unsigned long&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;int&lt;/td&gt;
      &lt;td&gt;ll or LL&lt;/td&gt;
      &lt;td&gt;long long&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;int&lt;/td&gt;
      &lt;td&gt;ull, uLL, Ull, ULL, llu, llU, LLu, or LLU&lt;/td&gt;
      &lt;td&gt;unsigned long long&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;double&lt;/td&gt;
      &lt;td&gt;f or F&lt;/td&gt;
      &lt;td&gt;float&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;double&lt;/td&gt;
      &lt;td&gt;l or L&lt;/td&gt;
      &lt;td&gt;long double&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned int nValue = 5u; // unsigned int
long nValue2 = 5L; // long
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Binary&lt;/strong&gt; there are only 2 digits, &lt;code class=&quot;highlighter-rouge&quot;&gt;bin = 0b1;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Octal&lt;/strong&gt; is base 8, &lt;code class=&quot;highlighter-rouge&quot;&gt;int x = 012;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hexadecimal&lt;/strong&gt; is base 16 &lt;code class=&quot;highlighter-rouge&quot;&gt;int x = 0xFF;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;C++14 also adds the ability to use a quotation mark (‘) as a digit separator.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int bin = 0b1011&#39;0010;  // assign binary 1011 0010 to the variable
long value = 2&#39;532&#39;673&#39;462; // much easier to read than 2532673462
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;magic number&lt;/strong&gt; is a hard-coded literal (usually a number) in the middle of the code that does not have any context.&lt;/p&gt;

&lt;p&gt;Rule: Don’t use magic numbers in your code.&lt;/p&gt;

&lt;h2 id=&quot;const-constexpr-and-symbolic-constants&quot;&gt;Const, constexpr, and symbolic constants&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const double gravity { 9.8 }; // preferred use of const before type
int const sidesInSquare { 4 }; // okay, but not preferred
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Const variables must be initialized when you define them, and then that value can not be changed via assignment.&lt;/p&gt;

&lt;p&gt;const variables can be initialized from non-const values:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;std::cout &amp;lt;&amp;lt; &quot;Enter your age: &quot;;
int age;
std::cin &amp;gt;&amp;gt; age;

const int usersAge (age); // usersAge can not be changed

void printInteger(const int myValue)
{
    std::cout &amp;lt;&amp;lt; myValue;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Constexpr&lt;/strong&gt; ensures that the constant must be a compile-time constant:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;constexpr double gravity (9.8); // ok, the value of 9.8 can be resolved at compile-time
constexpr int sum = 4 + 5; // ok, the value of 4 + 5 can be resolved at compile-time
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Rule: Any variable that should not change values after initialization should be declared as const (or constexpr).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;symbolic constant&lt;/strong&gt; is a name given to a constant literal value.&lt;/p&gt;

&lt;p&gt;Rule: Avoid using #define to create symbolic constants&lt;/p&gt;

&lt;p&gt;Rule: use const variables to provide a name and context for your magic numbers.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const int maxStudentsPerClass { 30 };
const int maxNameLength { 30 };
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Using symbolic constants throughout a program&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a header file to hold these constants&lt;/li&gt;
  &lt;li&gt;Inside this header file, declare a namespace&lt;/li&gt;
  &lt;li&gt;Add all your constants inside the namespace (make sure they’re const)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#include&lt;/code&gt; the header file wherever you need it&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;#ifndef CONSTANTS_H&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#define CONSTANTS_H&lt;/span&gt;

    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;own&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hold&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;constants&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;constants&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14159&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avogadro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0221413&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_gravity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gravity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;related&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;constants&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#endif&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Use the scope resolution operator (::) to access your constants in .cpp files:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;#include &quot;constants.h&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circumference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Integers are used for holding whole numbers. When using integers, keep an eye out for overflow and integer division problems. Use fixed-width integers instead of the variable size integers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Floating point numbers are used for holding real numbers (which can have fractional components). When using floating point numbers, keep an eye out for precision issues, rounding errors, and comparison issues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Boolean values hold only true and false. They do not have any major issues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Char values are integers that can be interpreted as an ASCII value. When using chars, be careful not to mix up ASCII code values and numbers, and watch for overflow and integer division problems.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the const keyword to declare symbolic constants instead of #define. It’s safer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 22 May 2016 16:50:11 -0700</pubDate>
        <link>http://heyl0822.github.io//_site/c++/2016/05/22/learn_c++_ch2_variables_and_fundamental_data_types.html</link>
        <guid isPermaLink="true">http://heyl0822.github.io//_site/c++/2016/05/22/learn_c++_ch2_variables_and_fundamental_data_types.html</guid>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Learn C++ Ch1 C++ Basics</title>
        <description>&lt;h2 id=&quot;structure-of-a-program&quot;&gt;Structure of a program&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Statement:&lt;/strong&gt; instruction of a program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Declaration statement:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;int x;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assignment statement:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;x = 5;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output statement:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;std::cout &amp;lt;&amp;lt; x;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expression:&lt;/strong&gt; a mathematical entity that evaluates to a value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; a collection of statements that executes sequentially.&lt;/p&gt;

&lt;p&gt;hint: It’s a good idea to have your main() function live in a .cpp file with the same name as your project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Library:&lt;/strong&gt; a collection of precompiled code (e.g. functions) that has been “packaged up” for reuse in many different programs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; rules that govern how sentences are constructed in a language&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax error:&lt;/strong&gt; If you violate a rule, the compiler will complain&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Comment:&lt;/strong&gt; a line (or multiple lines) of text that are inserted into the source code to explain what the code is doing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;//:&lt;/strong&gt; single-line comment, which tells the compiler to ignore everything to the end of the line.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;/* */&lt;/strong&gt; multi-line comment. Everything in between the symbols is ignored. Do not nest.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;sr&quot;&gt;/* This is a multi-line comment.
     * the matching asterisks to the left
     * can make this easier to read
     */&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;At the library, program, or function level, describe what&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Inside the library, program, or function, describe how&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At the statement level, describe why.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;variables-initialization-and-assignment&quot;&gt;Variables, initialization, and assignment&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Variable:&lt;/strong&gt; a name for a piece of memory that can be used to store information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;l-value:&lt;/strong&gt; a value that has an address (in memory).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;r-value:&lt;/strong&gt; refers to any value that can be assigned to an l-value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;initialization:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;int x = 5;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;assignment:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;int x; x = 5;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;uninitialized variable:&lt;/strong&gt; A variable that has not been assigned a value&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rule&lt;/em&gt;: Initialize your variables.&lt;/p&gt;

&lt;h2 id=&quot;cout-cin-endl-the-std-namespace-and-using-statements&quot;&gt;cout, cin, endl, the std namespace, and using statements&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;std::cout&lt;/strong&gt; output text to the console&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std::endl&lt;/strong&gt; inserts a newline character&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std::cin&lt;/strong&gt; reads input from the user at the console using the input operator (»).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;std::cin and cout always go on the left-hand side of the statement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;std::cout is used to output a value (cout = output)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;std::cin is used to get an input value (cin = input)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;« is used with std::cout, and shows the direction that data is moving from the r-value to the console.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;gt;&amp;gt; is used with std::cin, and shows the direction that data is moving from the console into the variable.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;using declaration&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declaration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tells&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;needed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here!&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;using directive&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tells&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;everything&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace!&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;needed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here!&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Rule&lt;/em&gt;: Avoid “using” statement outside of a function body.&lt;/p&gt;

&lt;h2 id=&quot;functions-and-return-values&quot;&gt;Functions and return values&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;function:&lt;/strong&gt; a reusable sequence of statements designed to do a particular job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;caller:&lt;/strong&gt; The function initiating the function call&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;callee or called:&lt;/strong&gt; the function being called&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;void:&lt;/strong&gt; means the function does not return a value&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;status code:&lt;/strong&gt; return a value back to the operating system. a return value of 0 means success, and a positive return value means failure.&lt;/p&gt;

&lt;p&gt;Functions can not be defined inside other functions (called nesting) in C++.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;function parameter:&lt;/strong&gt; a variable used in a function where the value is provided by the caller of the function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;argument:&lt;/strong&gt; a value that is passed from the caller to the function when a function call is made.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pass by value&lt;/strong&gt; value of each of the arguments is copied into the matching parameter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits of functions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Organization&lt;/li&gt;
  &lt;li&gt;Reusability, avoid duplicate&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
  &lt;li&gt;Extensibility&lt;/li&gt;
  &lt;li&gt;Abstraction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Effectively using functions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Code that appears more than once in a program should generally be made into a function. For example, if we’re reading input from the user multiple times in the same way, that’s a great candidate for a function. If we output something in the same way multiple times, that’s also a great candidate for a function.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Code that has a discrete set of inputs and outputs is a good candidate for a function, particularly if it is complicated. For example, if we have a list of items that we want to sort, the code to do the sorting would make a great function, even if it’s only done once. The input is the unsorted list, and the output is the sorted list.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A function should generally perform one (and only one) task.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When a function becomes too long, too complicated, or hard to understand, it should be split into multiple sub-functions. This is called refactoring.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Keywords&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;alignas&lt;/td&gt;
      &lt;td&gt;class&lt;/td&gt;
      &lt;td&gt;else&lt;/td&gt;
      &lt;td&gt;inline&lt;/td&gt;
      &lt;td&gt;public&lt;/td&gt;
      &lt;td&gt;switch&lt;/td&gt;
      &lt;td&gt;unsigned&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;alignof&lt;/td&gt;
      &lt;td&gt;const&lt;/td&gt;
      &lt;td&gt;enum&lt;/td&gt;
      &lt;td&gt;int&lt;/td&gt;
      &lt;td&gt;register&lt;/td&gt;
      &lt;td&gt;template&lt;/td&gt;
      &lt;td&gt;using&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;asm&lt;/td&gt;
      &lt;td&gt;constexpr&lt;/td&gt;
      &lt;td&gt;explicit&lt;/td&gt;
      &lt;td&gt;long&lt;/td&gt;
      &lt;td&gt;reinterpret_cast&lt;/td&gt;
      &lt;td&gt;this&lt;/td&gt;
      &lt;td&gt;virtual&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;auto&lt;/td&gt;
      &lt;td&gt;const_cast&lt;/td&gt;
      &lt;td&gt;export&lt;/td&gt;
      &lt;td&gt;mutable&lt;/td&gt;
      &lt;td&gt;return&lt;/td&gt;
      &lt;td&gt;thread_local&lt;/td&gt;
      &lt;td&gt;void&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bool&lt;/td&gt;
      &lt;td&gt;continue&lt;/td&gt;
      &lt;td&gt;extern&lt;/td&gt;
      &lt;td&gt;namespace&lt;/td&gt;
      &lt;td&gt;short&lt;/td&gt;
      &lt;td&gt;throw&lt;/td&gt;
      &lt;td&gt;volatile&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;break&lt;/td&gt;
      &lt;td&gt;decltype&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;new&lt;/td&gt;
      &lt;td&gt;signed&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;wchar_t&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;case&lt;/td&gt;
      &lt;td&gt;default&lt;/td&gt;
      &lt;td&gt;float&lt;/td&gt;
      &lt;td&gt;noexcept&lt;/td&gt;
      &lt;td&gt;sizeof&lt;/td&gt;
      &lt;td&gt;try&lt;/td&gt;
      &lt;td&gt;while&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;catch&lt;/td&gt;
      &lt;td&gt;delete&lt;/td&gt;
      &lt;td&gt;for&lt;/td&gt;
      &lt;td&gt;nullptr&lt;/td&gt;
      &lt;td&gt;static&lt;/td&gt;
      &lt;td&gt;typedef&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;char&lt;/td&gt;
      &lt;td&gt;do&lt;/td&gt;
      &lt;td&gt;friend&lt;/td&gt;
      &lt;td&gt;operator&lt;/td&gt;
      &lt;td&gt;static_assert&lt;/td&gt;
      &lt;td&gt;typeid&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;char16_t&lt;/td&gt;
      &lt;td&gt;double&lt;/td&gt;
      &lt;td&gt;goto&lt;/td&gt;
      &lt;td&gt;private&lt;/td&gt;
      &lt;td&gt;static_cast&lt;/td&gt;
      &lt;td&gt;typename&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;char32_t&lt;/td&gt;
      &lt;td&gt;dynamic_cast&lt;/td&gt;
      &lt;td&gt;if&lt;/td&gt;
      &lt;td&gt;protected&lt;/td&gt;
      &lt;td&gt;struct&lt;/td&gt;
      &lt;td&gt;union&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Identifiers&lt;/strong&gt; The name of a variable, function, class, or other object in C++&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;correct&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;correct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;separated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;underscores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myVariableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;correct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intercapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camelCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;holds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;piece&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;including&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whitespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;punctuation!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfChars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;operators&quot;&gt;Operators&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;literal&lt;/strong&gt; a fixed value that has been inserted (hardcoded) directly into the source code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Operands&lt;/strong&gt; supply the data that the expression works with. Literals, variables, and functions are all known as operands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Operators&lt;/strong&gt; tell the expression how to combine one or more operands to produce a new result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unary&lt;/strong&gt; operators act on one operand. &lt;code class=&quot;highlighter-rouge&quot;&gt;-5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Binary&lt;/strong&gt; operators act on two operands (known as left and right). &lt;code class=&quot;highlighter-rouge&quot;&gt;3 + 4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ternary&lt;/strong&gt; operators act on three operands. &lt;code class=&quot;highlighter-rouge&quot;&gt;(expression 1) ? expression 2 : expression 3&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;whitespace-and-basic-formatting&quot;&gt;Whitespace and basic formatting&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Your tabs should be set to 4 spaces&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The braces that tell where a function begins and ends should be aligned with the function name, and be on their own lines&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each statement within braces should start one tab in from the opening brace of the function it belongs to.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lines should not be too long. Typically, 72, 78, or 80 characters is the maximum length a line should be.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If a long line that is broken into pieces is broken with an operator (eg. « or +), the operator should be placed at the end of the line, not the start of the next line.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is a really, really, really, really, really, really, really, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;really long line&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indentation&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is another really, really, really, really, really, really, really, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;really long line&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This one is short&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Use whitespace to make your code easier to read.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;nCost&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nPricePerItem&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nValue&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nNumberOfItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                  &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;live&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iostream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It is very nice to meet you!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;these&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;easier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Yeah!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                         &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;especially&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lined&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;live&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iostream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;these&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;easier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It is very nice to meet you!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whitespace&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Yeah!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;forward-declarations-and-definitions&quot;&gt;Forward declarations and definitions&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Rule&lt;/em&gt;: When addressing compile errors in your programs, always resolve the first error produced first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;forward declaration&lt;/strong&gt; allows us to tell the compiler about the existence of an identifier before actually defining the identifier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;function prototype&lt;/strong&gt; consists of the function’s return type, name, parameters, but no function body&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;definition&lt;/strong&gt; implements or instantiates (causes memory to be allocated for) the identifier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;declaration&lt;/strong&gt; a statement that defines an identifier (variable or function name) and its type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pure declarations&lt;/strong&gt; a small subset of declarations that are not definitions, such as function prototypes&lt;/p&gt;

&lt;h2 id=&quot;header-files&quot;&gt;Header files&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;header guard&lt;/strong&gt; prevent a given header file from being #included more than once from the same file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.learncpp.com/images/CppTutorial/Section1/IncludeHeader.png&quot; alt=&quot;Valid XHTML&quot; /&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt; &amp;gt;&lt;/strong&gt; angled brackets are used to tell the compiler that we are including a header file that was included with the compiler, so it should look for that header file in the system directories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;” “&lt;/strong&gt; The double-quotes tell the compiler that this is a header file we are supplying, so it should look for that header file in the current directory containing our source code first. If it doesn’t find the header file there, it will check any other include paths that you’ve specified as part of your compiler/IDE settings. That failing, it will fall back to checking the system directories.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rule&lt;/em&gt;: Use angled brackets to include header files that come with the compiler. Use double quotes to include any other header files.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rule&lt;/em&gt;: use the non .h version of a library if it exists, and access the functionality through the std namespace. If the non .h version does not exist, or you are creating your own headers, use the .h version. tell your compiler or IDE that you have a bunch of header files in some other location, so that it will look there when it can’t find them in the current directory. This can generally be done by setting an “include path” or “search directory” in your IDE project settings.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g++ -o main -I /source/includes main.cpp&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Always include header guards.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do not define variables in header files unless they are constants. Header files should generally only be used for declarations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do not define functions in header files.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each header file should have a specific job, and be as independent as possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give your header files the same name as the source files they’re associated with (e.g. grades.h goes with grades.cpp).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Try to minimize the number of other header files you #include in your header files. Only #include what is necessary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do not #include .cpp files.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preprocessor&quot;&gt;preprocessor&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Preprocessor&lt;/strong&gt; a separate program that runs just before the compiler when you compile your program. Its purpose is to process directives. Directives are specific instructions that start with a # symbol and end with a newline&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Includes&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;#include &amp;lt;filename&amp;gt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;#include &quot;filename&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Macro defines&lt;/strong&gt; a rule that defines how an input sequence.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Object-like macro:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#define identifier&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#define identifier substitution_text&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Function-like macros act like functions, and serve a similar purpose. We will not discuss them, because their use is generally considered dangerous, and almost anything they can do can be done by an (inline) function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conditional compilation&lt;/strong&gt; #ifdef, #ifndef, and #endif.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#pragma once&lt;/strong&gt; serves the same purpose as header guards, and has the added benefit of being shorter and less error-prone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;design programs&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Step 1: Define the problem&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 2: Define your tools, targets, and backup plan&lt;/p&gt;

    &lt;p&gt;Understanding who your target users are and what they want.&lt;/p&gt;

    &lt;p&gt;Defining what target architecture and/or OS your program will run on.&lt;/p&gt;

    &lt;p&gt;Determining what set of tools you will be using.&lt;/p&gt;

    &lt;p&gt;Determining whether you will write your program alone or as part of a team.&lt;/p&gt;

    &lt;p&gt;Collecting requirements (a documented list of what the program needs to do).&lt;/p&gt;

    &lt;p&gt;Defining your testing/feedback/release strategy.&lt;/p&gt;

    &lt;p&gt;Determining how you will back up your code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 3: Break hard problems down into easy problems&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 4: Figure out the sequence of events&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 5: Figure out the data inputs and outputs for each task&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 6: Write the task details&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 7: Connect the data inputs and outputs&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Words of advice when writing programs&lt;/p&gt;

    &lt;p&gt;Keep your programs simple to start.&lt;/p&gt;

    &lt;p&gt;Add features over time.&lt;/p&gt;

    &lt;p&gt;Focus on one area at a time.&lt;/p&gt;

    &lt;p&gt;Test each piece of code as you go.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;debugging-program&quot;&gt;Debugging program&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;syntax error&lt;/strong&gt; occurs when you write a statement that is not valid according to the grammar of the C++ language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;semantic error&lt;/strong&gt; occurs when a statement is syntactically valid, but does not do what the programmer intended.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;debugger&lt;/strong&gt; a computer program that allows the programmer to control how a program executes and watch what happens as it runs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stepping&lt;/strong&gt; a debugger feature that lets you execute (step through) your code line by line.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step into&lt;/strong&gt; executes the next line of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step over&lt;/strong&gt; executes the next line of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step out&lt;/strong&gt; executes all remaining code in the function you are currently in, and returns control to you when the function has finished executing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run to cursor&lt;/strong&gt; executes the program like normal until it gets to the line of code selected by your cursor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run&lt;/strong&gt; tell the debugger to run until it hits the end of the program&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;breakpoint&lt;/strong&gt; a special marker that tells the debugger to stop execution of the program at the breakpoint when running in debug mode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Watching variables&lt;/strong&gt; the process of inspecting the value of a variable while the program is executing in debug mode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;call stack&lt;/strong&gt; a list of all the active functions that have been called to get to the current point of execution.&lt;/p&gt;
</description>
        <pubDate>Sat, 21 May 2016 15:32:52 -0700</pubDate>
        <link>http://heyl0822.github.io//_site/c++/2016/05/21/learn_c++_ch1_c++_basics.html</link>
        <guid isPermaLink="true">http://heyl0822.github.io//_site/c++/2016/05/21/learn_c++_ch1_c++_basics.html</guid>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Learn C++ Ch0 Introduction</title>
        <description>&lt;p&gt;A &lt;strong&gt;program&lt;/strong&gt; (or &lt;strong&gt;application&lt;/strong&gt; / &lt;strong&gt;software&lt;/strong&gt;) is a set of instructions that tells the computer what to do.&lt;/p&gt;

&lt;p&gt;High-level language cod -&amp;gt; Compiler -&amp;gt; Executable
Executable -&amp;gt; CPU -&amp;gt; Program results&lt;/p&gt;

&lt;p&gt;Some scripting language use &lt;strong&gt;Interpreter&lt;/strong&gt;. more flexible, less efficient.&lt;/p&gt;

&lt;p&gt;High-level language code -&amp;gt; interpreter -&amp;gt; CPU -&amp;gt; Program Results&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt; object oriented language&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;software development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Step 1: Define the problem to be solved.&lt;/p&gt;

&lt;p&gt;Step 2: Design a solution.&lt;/p&gt;

&lt;p&gt;A good solution: straightforward, well documented, built modularly, can be reused or change later, robust, can recover or give useful error message.&lt;/p&gt;

&lt;p&gt;Step 3: Write a program that implements the solution.&lt;/p&gt;

&lt;p&gt;Editor: line number, syntax highlighting and coloring, an unambiguous font.&lt;/p&gt;

&lt;p&gt;Step 4: Compile the program.&lt;/p&gt;

&lt;p&gt;Compiler: check program and make sure it follows the rule, convert source code into a machine language called object file, name.o or name.obj&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g++ -c file1.cpp file2.cpp file3.cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Step 5: Link object files.&lt;/p&gt;

&lt;p&gt;Linker: takes all object files into a single executable program linker, includes files from C++ standard library.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g++ -o prog file1.o file2.o file3.o
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Combine compile and link:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g+ -o prog file1.cpp file2.cpp file3.cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Step 6: Test and debug program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Integrated development environment (IDE)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;windows: VisualStudio, Code::Blocks&lt;/p&gt;

&lt;p&gt;Mac: Xcode&lt;/p&gt;

&lt;p&gt;Web: CodeChef&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;workplace:&lt;/strong&gt; a container that can hold one or more related projects. REcommand a new workplace for each program.&lt;/p&gt;

&lt;p&gt;Create a C++ project in Xcode: File -&amp;gt; New -&amp;gt; Project, under OSX -&amp;gt; Application -&amp;gt; Command Line Tool -&amp;gt; C++&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build Configurations:&lt;/strong&gt; a collection of project settings that determines how your IDE will build your project. A release configuration, a debug configuration.&lt;/p&gt;

&lt;p&gt;Change congifuration in Xcode: Product -&amp;gt; Scheme -&amp;gt; Edit Echeme: Build Configuration&lt;/p&gt;

&lt;p&gt;Shortcut: Alt + “Run”&lt;/p&gt;

</description>
        <pubDate>Thu, 19 May 2016 13:47:41 -0700</pubDate>
        <link>http://heyl0822.github.io//_site/c++/2016/05/19/learn_c++_ch0_introduction.html</link>
        <guid isPermaLink="true">http://heyl0822.github.io//_site/c++/2016/05/19/learn_c++_ch0_introduction.html</guid>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Computer Graphics Textbooks</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Fundamentals-Computer-Graphics-Fourth-Marschner/dp/1482229390/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1463339799&amp;amp;sr=1-1&amp;amp;keywords=Fundamentals+of+Computer+Graphics&quot;&gt;Peter Shirley, Fundamentals of Computer Graphics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/dp/0133574849/ref=pd_lpo_sbs_dp_ss_1/187-7197181-7650716?pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=lpo-top-stripe-1&amp;amp;pf_rd_r=09PT16E5FRBFGP7WNC3X&amp;amp;pf_rd_t=201&amp;amp;pf_rd_p=1944687582&amp;amp;pf_rd_i=0132545233&quot;&gt;Edward Angel, Interactive Computer Graphics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Computer-Graphics-3rd-Alan-Watt/dp/0201398559&quot;&gt;Alan Watt, 3D Computer Graphics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/OpenGL-Programming-Guide-Official-Learning/dp/0321773039&quot;&gt;Dave Shreiner, OpenGL Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Real-Time-Rendering-Third-Tomas-Akenine-Moller/dp/1568814240&quot;&gt;T. Akenine-Moller et al., Real-Time Rendering&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Scientific-Computing-Michael-T-Heath/dp/0072399104&quot;&gt;Heath, Scientific Computing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Methods-Hyperbolic-Problems-Cambridge-Mathematics/dp/0521009243&quot;&gt;LeVeque, Methods for Hyperbolic Problems&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Difference-Schemes-Partial-Differential-Equations/dp/089871639X&quot;&gt;Strikwerda, Finite Difference Schemes and Partial Differential Equations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Methods-Implicit-Surfaces-Mathematical-Sciences/dp/0387954821&quot;&gt;Osher, Level Set Methods and Dynamic Implicit Surfaces&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Richard-Haberman-Mathematical-Mathematics-Mechanical/dp/B008UBLIZC&quot;&gt;Haberman, Mathematical Models: Mechanical Vibrations, Population Dynamics and Traffic Flow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Physically-Based-Rendering-Second-Implementation/dp/0123750792&quot;&gt;Pharr, Physically Based Rendering&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 15 May 2016 04:50:52 -0700</pubDate>
        <link>http://heyl0822.github.io//_site/computer/graphics/learn/2016/05/15/computer_graphics_textbooks.html</link>
        <guid isPermaLink="true">http://heyl0822.github.io//_site/computer/graphics/learn/2016/05/15/computer_graphics_textbooks.html</guid>
        
        
        <category>computer</category>
        
        <category>graphics</category>
        
        <category>learn</category>
        
      </item>
    
      <item>
        <title>Markdown Note</title>
        <description>&lt;p&gt;Here is an syntax list of &lt;a href=&quot;http://yanlinghe.com/s/2016-05-11-markdown-note.md/&quot;&gt;markdown&lt;/a&gt; syntax.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Feel free to save this document and use it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A few tricks to start with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Put a blank line in between to start a new paragraph&lt;/li&gt;
  &lt;li&gt;If you want a line break, end your line with two spaces&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;paragraph&quot;&gt;Paragraph&lt;/h1&gt;

&lt;p&gt;One or more consecutive lines of text separated by one or more blank lines.&lt;/p&gt;

&lt;p&gt;This is another paragraph.&lt;/p&gt;

&lt;p&gt;And another!&lt;/p&gt;

&lt;h1 id=&quot;section-headings&quot;&gt;Section Headings&lt;/h1&gt;

&lt;p&gt;There are two ways to do headers in Markdown.&lt;/p&gt;

&lt;p&gt;You can underline text to make the two top-level headers:&lt;/p&gt;

&lt;h1 id=&quot;header-1&quot;&gt;Header 1&lt;/h1&gt;

&lt;h2 id=&quot;header-2&quot;&gt;Header 2&lt;/h2&gt;

&lt;p&gt;The number of &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; signs doesn’t matter; you can get away with just one.  But using enough to underline the text makes your titles look better in plain text.&lt;/p&gt;

&lt;p&gt;You can also use hash marks for all six levels of HTML headers:&lt;/p&gt;

&lt;h1 id=&quot;header-1-1&quot;&gt;Header 1&lt;/h1&gt;
&lt;p&gt;## Header 2 ##
### Header 3 ###
#### Header 4 ####
##### Header 5 #####
###### Header 6 ######&lt;/p&gt;

&lt;p&gt;The closing &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; characters are optional.&lt;/p&gt;

&lt;h1 id=&quot;phrase-emphasis&quot;&gt;Phrase Emphasis&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;This is italicized&lt;/em&gt;, and so is &lt;em&gt;this&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is bold&lt;/strong&gt;, and so is &lt;strong&gt;this&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can use &lt;strong&gt;&lt;em&gt;italics and bold together&lt;/em&gt;&lt;/strong&gt; if you &lt;strong&gt;&lt;em&gt;have to&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;horizontal-rules&quot;&gt;Horizontal Rules&lt;/h1&gt;

&lt;p&gt;You can insert a horizontal rule by putting three or more hyphens on a line by themselves:&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;blockquotes&quot;&gt;Blockquotes&lt;/h1&gt;

&lt;p&gt;Blockquotes are indented:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The syntax is based on the way email programs
usually do quotations. You don’t need to hard-wrap
the paragraphs in your blockquotes, but it looks much nicer if you do.  Depends how lazy you feel.
Looks good!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;lists&quot;&gt;Lists&lt;/h1&gt;

&lt;p&gt;A bulleted list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can use a minus sign for a bullet&lt;/li&gt;
  &lt;li&gt;Or plus sign&lt;/li&gt;
  &lt;li&gt;Or an asterisk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A numbered list:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Numbered lists are easy&lt;/li&gt;
  &lt;li&gt;Markdown keeps track of the numbers for you&lt;/li&gt;
  &lt;li&gt;So this will be item 3.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;p&gt;Here’s an inline link to &lt;a href=&quot;http://www.google.com/&quot;&gt;Google&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can write bare URLs or email addresses by enclosing them in angle brackets:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My web site is at &lt;a href=&quot;http://www.yanlinghe.com&quot;&gt;http://www.yanlinghe.com&lt;/a&gt;
My email address is: &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#104;&amp;#064;&amp;#121;&amp;#097;&amp;#110;&amp;#108;&amp;#105;&amp;#110;&amp;#103;&amp;#104;&amp;#101;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#104;&amp;#064;&amp;#121;&amp;#097;&amp;#110;&amp;#108;&amp;#105;&amp;#110;&amp;#103;&amp;#104;&amp;#101;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;images&quot;&gt;Images&lt;/h1&gt;

&lt;p&gt;Images are exactly like inline links, but they have an exclamation point in front of them:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://w3.org/Icons/valid-xhtml10&quot; alt=&quot;Valid XHTML&quot; /&gt;.&lt;/p&gt;

&lt;p&gt;The word in square brackets is the alt text, which gets displayed if the browser can’t show the image.  Be sure to include meaningful alt text for blind users’ screen-reader software.&lt;/p&gt;

&lt;h1 id=&quot;special-sections-notes-tips-etc&quot;&gt;Special sections (Notes, Tips, etc.)&lt;/h1&gt;

&lt;p&gt;To make a special section, indent four spaces:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NOTE: This is some other cool stuff we can do!
       Of course, it can be a paragraph inside a note.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use backticks to create a special formatted section inline. (The backtick key is in the  upper left corner of most keyboards)&lt;/p&gt;

&lt;p&gt;This is &lt;code class=&quot;highlighter-rouge&quot;&gt;really&lt;/code&gt; expensive item, lots of &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;tables&quot;&gt;Tables&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;First Header&lt;/th&gt;
      &lt;th&gt;Second Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Row1 Cell1&lt;/td&gt;
      &lt;td&gt;Row1 Cell2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Row2 Cell1&lt;/td&gt;
      &lt;td&gt;Row2 Cell2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Outer pipes on tables are optional&lt;/li&gt;
  &lt;li&gt;Colon used for alignment (right versus left)&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 11 May 2016 10:41:01 -0700</pubDate>
        <link>http://heyl0822.github.io//_site/syntax/note/2016/05/11/markdown-note.html</link>
        <guid isPermaLink="true">http://heyl0822.github.io//_site/syntax/note/2016/05/11/markdown-note.html</guid>
        
        
        <category>syntax</category>
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>Jekyll Note</title>
        <description>&lt;p&gt;I start at choosing platform. It will be easier if I simply choose a blog host, but I also want to add code and math, so I did a little bit research. I tried Logdown, but it is not as fast as I want. I also found Farbox which is a Chinese application, it doesn’t like my gmail account. So I decide to use learn more about the structure of static website.&lt;/p&gt;

&lt;h3 id=&quot;quickstart&quot;&gt;Quickstart&lt;/h3&gt;

&lt;p&gt;Download and follow the steps shown on line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ gem install jekyll
~ $ jekyll new learn-blog
~ $ cd learn-blog
~/my-awesome-site $ jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Add a file with format &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&quot;file-format&quot;&gt;File Format&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Add Link:&lt;/strong&gt; Original jekyll format .md &lt;a href=&quot;https://yanlinghe.com/s/2016-05-11-jekyll-note.md&quot;&gt;file&lt;/a&gt; download:&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;code-format&quot;&gt;Code Format&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;tricks&quot;&gt;Tricks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Create post using terminal:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tried to create a post using terminal, so I use &lt;strong&gt;rake&lt;/strong&gt;. I create a file called reakefile.rb and wrtie the script based on &lt;a href=&quot;http://quyennguyen.com/code/rake_for_jekyll/&quot;&gt;Quyen’s&lt;/a&gt; suggestion:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# Asking for title&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;STDIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chomp&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Title: &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;#Create new a post&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Default &#39;rake&#39; command creates a new post&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;%Y-%m-%d&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\s/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;_&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.markdown&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exist?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;File exists &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;w&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;

  ---
  layout: post
  title: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  date: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;%Y-%m-%d %k:%M:%S&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  ---
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  EOS&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Using MathJax:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot;
               src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&amp;gt;
       &amp;lt;/script&amp;gt;&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;post.html&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; folder.&lt;/p&gt;

</description>
        <pubDate>Wed, 11 May 2016 10:41:01 -0700</pubDate>
        <link>http://heyl0822.github.io//_site/syntax/note/2016/05/11/jekyll-note.html</link>
        <guid isPermaLink="true">http://heyl0822.github.io//_site/syntax/note/2016/05/11/jekyll-note.html</guid>
        
        
        <category>syntax</category>
        
        <category>note</category>
        
      </item>
    
  </channel>
</rss>
